Day01
1.vuex的核心是store容器，里面包含应用的state,是一个单一的状态树，vuex的状态存储是响应式的，若store中的状态发生改变，组件会高效更新，不能直接改变store中状态，唯一途径就是显示的提交mutation, store.commit('increment')，方便状态管理
2.项目开始的时候调用Vue.use(Vuex)
const store = new Vuex.store({
   state: {
     count: 0
   },
   mutations: {
     increment(state) {
	state.count ++;
     }
   }
});
3.在单个组件中使用store中的状态，最好的方式是通过定义计算属性来拿，直接store.state.count
4.当很多个全局状态时，可以导入{mapState} 然后在computed:{ ...mapState({count:(state)=>state.count,newCount(state){}}) }
5.getters属性是store的计算属性，会将state中的数据计算后返回，在子组件中也是在computed属性中通过this.$store.gettters.doneTodos获取
6.在store的getters里面互相调用计算属性时可以直接用第二个参数getter获取其他计算属性的值:
  getters: {
    dones(state,getters){}
  }
7.子组件里可以通过{mapGetters}获取store中的计算属性，在computed里面: ...mapGetters(['todoCount'])


Day02
1.提交mutation，只有提交mutation才能改变state，一般带参数，参数名为payload的对象作为参数,
  mutations: {
    increment(state,payload) {
      state.count += payload.len
    }
  }
2.mutation可以定义成常量，进行使用，export const SOME_MUTATION=‘SOME_MUTATION’,提交方式: this.$store.commit(`ADD_MUTATION`)
3.mutation提交的都是同步事物，也可以使用mapMutations来映射，不好传递参数，最好不用吧

Day03
1.actions可以处理异步提交mutation，可以在action中写延时操作，然后在延时回调中提交mutation，提交方式:
this.$store.dispatch('checkout',{
          len: 6
        })
2.promise用法: https://www.cnblogs.com/SamWeb/p/8417940.html
3.actions里面有一个context参数和store具有相同的属性和方法，必须在里面要通过context来提交mutation改变state，也可以context.state和context.getters
4.可以在action里面返回promise来处理action结束后的事情

Day03 https://blog.csdn.net/qq_39523111/article/details/79638614
1.由于store是一个单一的状态树，当状态比较大的时候就会非常臃肿，这时候可以通过添加modules管理状态
2.默认情况下，module中的mutation，getters，action依然是全局的，可以通过this.$store.commit/this.$store.dispatch/this.$store.getters来获取
3.module里面的状态是局部的，可以通过模块来访问:this.$store.state.a.count来访问
4，虽然上面的getters，mutations，actions默认是全局的，但是里面的参数是局部的，最好通过解构的方式拿取：context中多了{rootState,rootGetter}两个参数来获取全局的状态
5.也可以添加一个namespaced属性来限制命名空间,当用到了命名空间，提交mutations，actions，getters前需要加模块了，this.&store.commit('a/muA')
6.父子孙组件通信，正向可以通过props进行传递数据，或者通过ref拿到子组件通过子组件来调用其方法，反向可以通过$emit派发事件，还可以通过在子组件中this.$parent,孙组件this.$parent.$parent来获取父组件调用方法，还以通过在父组件中暴露自己,provide() {return {fatherObj: this}}子孙组件在inject:['fatherObj']后，直接通过this.fatherObj获取父组件；
7.watch监听data里面的属性，当时一般对象时name(newv,oldv) {}或者'name'(newv,oldv){}，当监听data属性里面的对象的属性时，'obj.name'(){},当监听整个对象时，obj: {hanlder(){},deep:true}
8.Vue.use(Toast);底层就是执行了Toast对象的install方法，里面会在Vue的原型上添加方法和属性；所以定义自定义的Vue组件时，要先,let Toast = {};Toast.install = function() {}




