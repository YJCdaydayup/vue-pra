第一节课:
1.react + webpack + es6很常见
2.可以通过loader支持处理CommonJs AMD ES6 CSS image JSON Coffeescript less文件，自定义的文件如.vue，所以不需要引用规范的插件，而直接使用规范的语法
3.可以进行代码分割，只加载需要的，提高加载速度，任何一个静态资源都是模块，找出模块的依赖关系进行打包
4.代码分割 loader 插件热更新
5.webpack高版本的命令会不一样，降低版本: cnpm install webpack@2.4.1 -g

第二节课 (直接使用webpack对一个js文件进行打包)
1.npm init
2.打包某个js文件: webpack hello.js -o hello.bundle.js 这个是针对webpack 4.20.0以上，以下就用webpack hello.js hello.bundle.js
3.Asset本次打包生成文件 Chunks本次包的分块 chunk Names本次打包的名称
4.__webpack_require__(1)来引用其他模块的
5.打包css文件,webpack只能识别js文件，其他类型的文件需要loader
  报错类型: You may need an appropriate loader to handle this file type. 安装loader npm 	   
  install css-loader style-loader -—save-dev后，再使用
  1.require(‘css-loader!./style.css’)引用css文件，再打包,当使用这个budle,js文件后，会执行这个代码插入css，会发现css并不生效，这个时候需要使用require(‘style-loader!css-loader!./style.css’),这里的style-loader会自动安装了 
  2.可以不用管代码里面的引用loader，直接require(‘./style.css’),需要在命令行中指定loader
   webpack hello.js hello.bundle.js —-module-bind ‘css=style-loader!css-loader’

6.每次更新代码，自动打包生成文件: 
   webpack hello.js hello.bundle.js —-module-bind ‘css=style-loader!css-loader’ —-watch

7.webpack hello.js hello.bundle.js —-module-bind ‘css=style-loader!css-loader’ ——progess看进度

8.webpack hello.js hello.bundle.js —-module-bind ‘css=style-loader!css-loader’ —-progess — — display-modules把使用到的模块也列出来了
9. — —dispay -reasons看到为什么要使用某个模块，看到模块的依赖关系


第三节课
1.webpack.config.js是默认的配置名，可以通过webpack —config filename重新指定
2.entry: 可以是字符串和数组，这是针对于单页面，只有一个入口，当传入对象时就是针对多页面模式了,要用到[name][hash]不会变[chunkhash]会变，相当于具体文件的版本号


第四节课
1.自动生成页面插件 html-webpack-plugin 如果报错就将webpack指向全局的webpack npm link webpack

第五节课
1.多页面
2.安装babel cnpm i —save-dev babel-loader babel-core 可以使用.babelrc配置文件或者query: {preset: [‘lastest’]}选择需要处理哪些js(可以直接写在package里面)cnpm I —save-dev babel-preset-latest,运行cnpm run dev
3.loader的参数: test loader exclude:’./node_modules’ 排除的范围 include: ‘./src’只找src目录下
4.最新的版本需要使用rules代替loaders 并且在loader:’babel-loader’具体化x