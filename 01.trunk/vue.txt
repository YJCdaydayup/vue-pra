1.前端最火的MVVM框架，数据驱动，组件化，轻量，简洁，高效 20kb左右

2.后端交互vue-resource 前端路由vue-router 第三方js库better-scroll webpack可以将源码经过编译生成浏览器可以运行的代码 Es6 + eslint检测es6代码风格

3.View 视图DOM   ViewModel 通讯观察者   Model 数据 javascript对象 

4.Angular.js 56k 难 双向数据绑定
  react.js 44k 组件化
  vue.js都是MVVM框架 gzip后20k 借鉴了angular的指令和react的组件化，自己的特性如计算属性

5.组件设计原则 页面上每个独立的可视／可交互区域都可为一个组件，每个组件对应一个工程目录，组件所需资源在这个目录下就近维护，每个页面就是一个或多个组件的容器

6.Vue.cli是Vue的脚手架工具，目录结构 本地调试 代码部署 热加载 单元测试

模版 webpack模版，模版有很多，一般选这个

7.安装vue-cli 
  $ sudo npm install -g vue-cli
  查看模版
  $ vue list
  创建一个使用webpack模版的项目名为sell
  $ vue init webpack sell
  启动项目
  $ npm run dev

8.command + option + L代码进行自动格式化
9.注释需要留空格


*********************************
第一节课
1.传统的通过js操作dom非常耗性
2.DOM Vue JS
3.Object.defineProperty()函数，在对象的set和get方法里面对DOM。进行操作属于自动的，这样就形成了初步的数据和DOM绑定，完成此案例
4.SPA单页面应用

第二节课
前端：Vue.js 包含Vue-Router Axios Vuex(自定义组件) Util 依赖
后端 Node Express（对node.js的封装，学习此框架非常重要）
数据库 MongoDB
工具支持: vue-cli生成模版 webpack进行构建
线上部署

慕课上有Vue的基础课程
ES6要学习

第三节课
cnpm是npm使用淘宝做的的镜像
npm install -g cnpm — -registry=https://registry.npm.taobao.org,cnpm和npm是一样的
升级npm： npm install -g npm

cnpm command：
cnpm i vue — -save 安装一个包

node命令
1.先进入node的环境，写函数和变量，都是js的语法
2.node node-test.js执行js文件

第四节课
1.Vue多页面应用文件引用
  直接通过script引用vue.js
  <script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.js"></script>
  npm安装:
  下载vue.js包
  cnpm -i vue — -save
2.vue-cli构建SPA单页面应用
  $ sudo npm install -g vue-cli
  查看模版
  $ vue list
  创建一个使用webpack模版的项目名为sell
  $ vue init webpack demo5
  $ vue init webpack-simple demo5

  index.html单页面入口
  脚本的运行必须在对应的工程目录下
  在package.json里面找到scripts查看运行起来的脚本，执行里面的命令
  如果npm run dev跑开发模式，跑不起来，先安装依赖，在README.md里面查看使用命令

第五节课
1.{{msg}}
2.html赋值 v-html=“”
3.v-bind:id=“”
4.表达式:{{ok ? : }}
5.v-text=“”
6.v-if指令
7.过滤器 {{msg|cap}}和v-bind:id=“”

class绑定
对象语法:v-bind:class=“{active:isActive,”text-danger”:hasError}”
数组语法:v-bind:class=“[class1,class2]”

style绑定
v-bind:style=“{color:activeColor变量,fontSize:fontSize+’px’}”

条件渲染
v-show 
v-if 显示／隐藏，删除DOM
v-else
v-else-if 
v-cloak 

事件处理器
v-on:click=
@click
(stop冒泡 prevent默认事件 self绑定自己，子元素无作用 once绑定一次)

v-on:keyup.enter监听enter键的事件

组件
全局组件（多页面）和局部组件(SPA)
父子组件，父—>prop—>子组件 子—>emit—>父 父子组件通信
slot插槽


第六节课
前端路由: SPA程序，只改变内容，结构不变
优点，体验好，看似10张页面，实际一张，速度快
缺点，不利于SEO，不利于百度搜到，前进后退重新发请求，无法缓存
     无法记住滚动条的位置

vue-router构建SPA关键
<router-link>标签跳转，类似a标签，this.$router.push({path:””})
<router-view>标签渲染

 	
动态路由匹配
./ 当前目录
../ 上级目录
@配置里面设置了属于src目录
{{$route.params.username}}

嵌套路由
就是一种a标签，实现页面的跳转跳转后，又是一个新的页面，这个页面会包含上一级页面的内容，以及自己页面的内容

编程式路由
通过js实现页面跳转
$router.push(“name”)
$router.push({path:”name”})
$router.push({path:”name?a=123”})或者$router.push({path:”name”})
$trouter.go(1/-1)

命名路由和命名视图


第七节课
1.通过CDN引入vue.resource.min.js
2.通过npm安装 npm install vue-resource - - save

7种api
get(URL,[])
head
Delete
Jsonp
Post
put
Patch

Url
Method
Body
Params
headers
Timeout
Before
Progress
credientials 传递凭证
emulateHTTP 在请求头里设置

全局拦截器
Interceptors,管理loading

GET,POST,JSONP,HTTP

Axios异步请求插件
CDN方式
npm install axios - -save


第八节课
ES6简介
1.函数的Rest参数和扩展
2.Promise使用
3.moudle.exports和ES6
4.import 导入
5.export 导出


第九节课
AMD,是Reuqire.js推广过程中的产出物，动态异步的加载js文件，依赖前置,require.js也完善了CMD
定义模块的时候:
define([‘package/lib’],function(lib){
   function foo(){
	lib.log(‘hello world!’);
   }

   return {
      foo: foo;
   }
})

CMD,是SeaJS在推广过程中对模块化定义的产出物，同步模块定义，淘宝团队，依赖就近，什么地方使用，就在什么地方require:
   define(function(require, exports,module){
      // 通过require引入依赖
      var $ = require(‘jquery’);
      var Spinning = require(‘./spinning’);
   });


CommonJs,module.exports node.js才使用的
export.area = function(r) {
    return Math.PI * r * r;
  }

ES6:export import
export default {
   props:[“num”],
   data() {
     return {}
   },
   methods: {
     increment() {
       this.$emit(“incre”);
       
       // 导入外部js
       import(‘./../util’);
     }
   }
}

第十节课
商品列表基础组件拆分
Header组件
Footer组件
面包屑组件

组件和页面要区分开，虽然都是.vue文件
assets 存放组件的相关资源
static 存放页面相关的资源

第十一节课
1.mock数据，渲染列表信息
2.最新版的vue-cli的配置中浏览器服务都在webpack.dev.server这个插件中，所以本地服务器的处理在webpack.dev.conf.js中修改，安装express cnpm install express — —save-dev

3.图片懒加载插件 在npm里面搜索vue-lazyload 安装cnpm i vue-lazyload — —save

4.created:在组件渲染成html前调用 mounted:组件渲染成html后调用，这个时候各个标签已经渲染出来了，相当于window.onload方法

5.服务网络请求时，网络配置修改以及请求的文件修改后，必须重新启动项目

6.不支持ifelse语句，使用三元运算，里面的用法和js一样的 {{index == 0 ? 'All': price.minPrice + ' - ' + price.maxPrice}}

7.{{}}里面支持js语法，字符串用'', 不支持js自定义的变量 不能有var ，可以访问白名单里面的Math和Date

8.@click=“priceChecked=“all”” 绑定事件里面，可以写表达式
9.:class="{cur:priceChecked==index}"  绑定class里面也可以写表达式，但是当处理的事件比较复杂的时候，还是使用方法


第十二节课
1.Linux系统安装 https://nodejs.cn/download/
2.node基础编程: 基于Chrome V8引擎 单线程 使用javascript开发后端服务(不能用一些前端框架，语法一样)
3.Common规范
4.创建一个Http Server
5.创建一个web容器，可以访问HTML内容
6.nodejs是支持ES6的，前端的代码很多浏览器不支持，就需要前端的代码需要解析和编译的

7.nodejs.cn/api查看nodejs文档

第十三节课
1.搭建Express框架的运行环境
2.安装express generator生成器脚手架 cnpm i -g express-generator
3.创建后端项目 express servercn	
4.配置分析使用
  bin/www是可执行文件,修改了要重启
  res.render('index', { title: 'Express' }); 默认加载views下面的index文件 ，传递的参数为Express
5.由于当前server前后端在一个项目里面，这里可以共用依赖，同一个package.json,赋值过来，进行cnpm i安装依赖
6.启动服务 node bin/www 端口的配置在app.js里面，默认是3000


7.views里面也可以不使用jada文件，而使用html


第十四节课
1.下载安装包 https://www.mongodb.com/download-center?jmp=nav#community 上传服务器解压缩 添加db存储和日志存储文件夹
2.去阿里云买一个服务器 服务器一般是Ubuntu或Linux系统
3.登陆服务器 ssh root@133.444.4.4 
4.传递文件到服务器: ftp / ssh / scp  scp file root@123.33.3.3:/(/就是根目录)
5.下载mongodb客户端 http://mac.brothersoft.com/mongohub-download.html
6.Mac上安装mongodb可以直接参考菜鸟网站
7.创建一个数据库存储目录/data/db这个是默认的目录 
8.启动mongodb，sudo mongod(找不到命令 export PATH=/usr/local/mongodb/bin:$PATH)


第十五节课
启动: 1.启动数据库 2.启动mongodb shell终端 3.打开mongohud客户端工具
1.两种方式保证安全性，
  绑定IP，一台机器是服务器，另一台机器是数据库，将两个进行绑定，只允许某台服务器访问该数据库；
  给数据库创建账号和密码
2.创建管理员
  sudo mongod非授权的方式进去 -> 执行mongo进入shell终 -> show dbs 查看数据库 
  -> use admin 创建一个admin数据库 -> db.createUser（db.addUser）({user: “admin”,pwd: “admin”,roles: [“root”]})回车创建账号密码 -> db.auth(‘admin’,”admin”)进行认证
  -> 切换数据库，给test数据添加账号密码 use test -> db.createUser({user:”root”,pwd:”123456”,roles:[{role:’dbOwner’,db:”test”}]}); 
  -> 再次通过 sudo mongod --auth认证的方式启动数据库 -> 打开客户端，给test数据库添加账号密码
3.授权认证，
4.添加账号密码
5.插入数据必须要指定是哪个集合


第十六节课
1.非关系型数据库 database数据库 collection表 document数据行/文档 field(键值对) index索引  
2.主键，primary key 自动将_id设置为主键
3.由于mongo数据库存在子文档结构，所以不需要像mysql一样定义一张新的表再建立表关系

3.插入文档(即行)(表名称最好用s结尾，如goods，usrs)
  $ show dbs 查看数据库
  $ use demo 创建数据库(不插数据或表这个数据库依然不存在) 默认就切换到当前数据库了
  $ db.createCollection("user") 创建表user
  $ db.users.insert({id: 123}) 创建表users 并插入数据
  $ show collections 查看当前数据库下的所有表
  $ db.dropDatabase() 删除当前数据库
  $ db.user.drop() 删除当前数据下的user表
  $ db.user.find().pretty()格式化查看当前数据库下user表下的数据，pretty()格式化查看
  $ db.user.find({userName:"jack"}) 查询jack的信息，查询条件必须是对象
  $ db.user.find({'class.name':'taobao’})查询子文档
  $ db.user.findOne() 查看第一条数据
  $ db.user.find({age:{$gt:40}})查询年龄大于40的 100000077
  $ db.user.find({age:{$lt:40}})查询年龄小于40的
  $ db.user.find({age:{$eq:58}})查看等于年龄58的
  $ db.user.find({age:{$gte:58}})查看大于等于58的
  $ db.user.find({age:{$lte:58}})查看小于等于58的
  $ db.user.update({userName:"jack"},{$set:{age:30}}) 更新数据库jack的年龄，条件和值必须都是对象
  $ db.user.update({userName:"jack"},{$set:{'class.name':"imooc-test”}})更新子文档class，注意:‘class.name’要用引号
  $ db.user.remove({userId: 101}) 删除数据
  // 删除子文档下某些数据
  $ db.users.update({"userName":"admin"},{$pull: {cartList: {productNum: "NaN"}}})
  // 更新或者插入子文档
  $  db.users.update({userName:"admin"},{$push:{"addressList":{addressId:'10002',userName:"Macheal",streetName:"北京市老街","postCode":888888,"tel":1234567890,isDefault: false}}})

  // 分页 排序 自己学会

第十七节课
1.使用mysql作为数据库的话，每类数据都要建立一张表，最后通过userid建立表的关联，比较麻烦
2.可以使用命令来导入数据，mongoimport -d db_demo -c users --file /Users/yangli/Desktop/users.json (执行的前提是数据库服务开启，mongodb的shell终端要关闭)


第十八节课
1.node.js的启动方式三种
  通过node命令启动
  Webstorm配置启动入口 只能通过webstorm进行调试
  pm2 负载均衡 npm包里面的插件 通过进程的方式来管理的
  $ cnpm i pm2 -g 安装
  $ pm2 start bin/www
  $ pm2 stop all 或bin/www这个停止
  $ pm2 log 查看日志
  $ pm2 list查看开启的服务
  


2.routes里面每个js文件就对应一个页面，app.js里面通过app.use(‘/users’,users)定义的是一级路由
3.二级路由在route目录下面某个页面里面定义

第十九节课
1.基于Express开发商品列表查询接口
  安装mongoose 是mongodb的封装，类似FMDB.  cnpm i mongoose - - save （mongoose精细化学习）
  创建model，和数据库关联
  创建路由 通过model查询数据库
  基于mongoose实现商品列表的查询功能

2.https://blog.csdn.net/sps900608/article/details/79599121查看Vue全家桶技术栈


第二十节课
1.排序
2.vue-infinite-scroll 插件实现滚动加载更多 cnpm i vue-infinite-scroll — — save
3.svg可以在github找很多

第二十一节课
1.模块cookie-parse是专门用于做Cookie处理的
2.<span v-text=“nickName” v-if=“nickName”></span>
3.supervisor插件 服务器自动重新启动


第二十二节课
1.插件就是中间件(可能是自己开发的中间件)
2.在app.js中设置捕获登录功能
3.location.pathname获取的是完整的路由，不包括域名，端口和参数
4.location.href获取的是整个url地址，包括了路由，域名，端口，参数
5.location.origin获取的是域名 端口和路由 不包括参数,location.hash可以拿到hash值
6.express-session用于做session存储的
7.vuex可以实现组件之间的数据传递，登录校验可以使用接口进行校验
8.研究一下svg图片的原理
9.由于登录模态框有header组件控制，最好将模态框写在header组件里面，也可以再将模态框定义成一个组件，通信组件来完成交互
10.定义的组件就是一个新的标签，父子通信有两种，一种是信息传递通过props:[“mdShow”]，子组件通信给父组件其实是使用$emit(‘close’)，类似于trigger让父组件执行他的close特殊定义的事件，改变mdShow属性来改变子组件


第二十三节课
1.NavHeader 定义的组件标签根据W3C标准最好使用小写，对于驼峰式的组件名，要使用nav-header作为标签名
2.在密码输入框上加@keyup.enter=“login”开启键盘回车事件
3.v-for循环上的遍历时，子标签的属性只要和item有关，这个属性就必须绑定 如: <img :src=“” :alt=“”>
4.开发过程中使用的是代理重定向的形式实现请求的，线上部署时使用ngix实现重定向
5.开发过程中的重定向使用: /users/* 只能匹配二级路由，/users/**能所有users下的请求,三级路由…，这个只能用于开发模式，线上部署时这块的代码是不会编译进去的
6.禁止浏览器缓存，Network下勾选Disable cache即可
7.操作node数据库时，数据字段插不进去很可能是数据model里面没有定义这个字段
8.通过for循环遍历生成的列表，在函数中拿到item后对item.checked字段进行操作时，也会形成数据驱动

第二十四节课
1.js中数组遍历:  this.cartList.forEach((item)=>{})
2.mongoose里面没有找到批量更新子文档的方式，一般都是通过遍历子文档的方式
3.computed里面的属性只能通过计算改变，在其他地方是无法改变的，可以在事件里面改变计算属性的表达式里面元素的值即可
4.需要实时计算的属性不要写在data里，要写在computed里
5.定义过滤器: // 全局过滤器就需要在main.js中导入,然后 Vue.filter(‘currency’, currency即可)
  // 导入有名字的js文件就要用{}
  import {currency} from ‘’
  fileters: {
    currency: currenty // 因为currenty本身已经是一个函数了
  }
  // 使用
  {{money | currency(‘$’)}}


第二十五节课
1.this.$router.push({path: “/address”}) // push其实是对history的封装
2.切换展开/收起功能，使用计算属性，tempList 和 limit
3.文档包括的删除，插入，更新，可以使用update pull push来实现，复杂一点也可以遍历后修改，最后将文档save一下
4.页面跳转方式依然是这两种:
  i.通过this.$router.push跳转。
  this.$router.push({
              path: '/orderSuccuss?orderId=' + res.result.orderId
            });
  // {{$route.query.goodsId}} 标签上拿取方式
  ii.使用router-link跳转:
  // 是一种a标签，但是它有to属性 <a class="btn btn--m btn--red" href="#">Next</a>
  <router-link class="btn btn--m btn--red" to="/orderConfirm">NEXT</router-link>
  // 带参数 to要加冒号，path不要/ 
  <router-link class="btn btn--m btn--red" :to="{path: 'orderConfirm',query:{addressId:selectedAddressId}}">NEXT</router-link>
5.写SPA项目时，因为只有一个html页面入口，每个vue组件和页面，一般是在.html和.css文件中写好后，copy进来的,对于封装好的header bread footer可以在编写html静态页面是不写，只写需要的


第二十六节课
1.v-for和v-if结合使用<li v-for=“item in cartList” v-if=“item.checked == ‘1’”><li>


第二十七节课
1.通过route跳转传参后，参数拿取方式: let addressId = this.$route.query.addressId; //this.$router是跳转，而route是获取参数
2.通过doc.save(function(err, doc ))时，doc中新增的数据字段也会在数据库中创建新字段进行保存

第二十八节课
1.node.js中，get请求获取请求参数时，用括号！！！ req.param('orderId')

第二十九节课
1.Vuex,专门为Vue.js应用程序开发的状态管理模式
2.当构建一个大中型的单页面应用程序时，Vuex可以更好的帮助我们在组件外部统一管理状态，可以理解成window
3.State 把属性提取到State里面，任何页面都可以取到它
  唯一数据源
  单一状态数
  
  const Counter = {
     template: ‘<div>{{count}}</div>’,
     computed: {
       count(){
          return this.$store.state.count;
       }
     }
  };

  this就是当前的Vue对象，this.$store就是全局的唯一的Vuex，只要导入vuex，Vue.use全局一下，到哪里拿到的都是唯一的对象

4.getters
  对states中的数据进行过滤

5.Mutations 唯一可以提交和改变State里面的属性的
mutations: {
   // 这个state就是上面的State
   add(state) {
     state.count ++;
   }
}

store.commit(‘add’)来出发这个函数
  
6.Actions 提交的是mutation 可以包含异步操作 Vue使用dispatch进行触发
  actions: {
    adds(context) {
     content.commit(‘add’); // 通过context可以触发mutation里面的add方法
    }
  }

7.Modules 当状态比较多但也不愿意和其他模块进行混淆的时候，将状态按页面进行拆分，将vuex分割成模块
 const moduleA = {
   state: {},
   mutations: {}
   getters: {}
 }:

 const moduleB = {
   state: {},
   mutations: {}
   getters: {}
 }:

 const store = new Vuex Store({
   modules: {
     a: moduleA,
     b: moduleB
   }
 });

8.要定义一个store文件夹，添加不同的js文件作为不同的vuex模块

第三十节课
1.使用vuex的情况，集中管理状态，某个组件被多个组件同时引用，同时还要和组件交互 
2.组件使用vuex里面的属性时，一般通过计算属性
3.import { funcName } from ‘vuex’ // 即从vuex中导出某个funcName函数，直接使用
4.绑定class添加动画: :class=“[visible?’false-in’:’fade-out’]”

第三十一节课
1.部署server服务器，一般通过ftp传文件到服务器 ／ scp
2.ls -la查看权限 chmod 777 demo
3.scp file root@ip:/address
4.查看某个端口占用情况: lsof -i:3000 拿到pid进程ID， kill -9 pid杀掉这个进程
5.ctrl -z 进程依然存在
6.域名和ip是一一对应的
7.重命名 mv name newname
8.pm2 logs查看日志



  





