1.利用a标签自动解析URL
myURL.file;     // = 'index.html'
myURL.hash;     // = 'top'
myURL.host;     // = 'abc.com'
myURL.query;    // = '?id=255&m=hello'
myURL.params;   // = Object = { id: 255, m: hello }
myURL.path;     // = '/dir/index.html'
myURL.segments; // = Array = ['dir', 'index.html']
myURL.port;     // = '8080'
myURL.protocol; // = 'http'
myURL.source;   // = 'http://abc.com:8080/dir/index.html?id=255&m=hello#top'

2.页面拥有ID的元素会创建自动全局变量
<div id="sample"></div>
<script type="text/javascript">
        console.log(sample);
</script>

3.加载CDN文件时，可以省掉HTTP标识
<script src="//libs.baidu.com/jquery/2.0.0/jquery.min.js"></script>

4.利用script标签保存任意信息
<script type="text" id="template">
    <h1>This won't display</h1>
</script>

var text = document.getElementById('template').innerHTML

5.把浏览器当编辑器 data:text/html,<html contenteditable>

6.将以下代码放到console执行后，整个页面将变得可编辑！document.body.contentEditable='true';

7.contentEditable可以让标签进入可编辑状态

8.调试样式的时候可以实时的：
<body>
<div id="app">
    // 在body中添加这个:
    <style style="display:block" contentEditable>
        h1 { color: blue }
    </style>
    <h1>{{ msg }}</h1>
</div>
</body>

9.pageX是点击处移动端的相对整个视图X值，e = event || window.event; e.orginalEvent.touches[0].pageX;
screenX是点击处网页端相对于整个视图的X值，offsetLeft相对于父视图的X值只读的，jquery对象本身就是一个伪数组，第0个元素是这个标签本身；

10.兼容性问题
A.li标签下不要嵌套多个div，最合理的结构是ul li a span，可能会造成IE低版本浏览器兼容问题；

11.浮点数快速取整: (12.4 / 4.13) | 0 或 ～～(12.3)

12.快速转化为bool值 ~~a

13.字面量对象的某个属性是箭头函数时，函数里面的this就是window；

14.new Number（）虽然是number类型，数字，但不是真正的数字还有对象的额外功能；在堆区

15.string number bool Object function undefine （null），函数广义上属于一种对象

16.事件传播先捕获到根节点，再传递到目标节点，再冒泡到根节点

17.基础对象指原型链终点的对象。基础对象的原型是null就是没有原型；

18.所有对象键都会被存储为字符串,当对象转字符串时会变成"[Object object]",所以不管时什么对象，转成的字符串都是一样的

19.const arr = [1,2,3];数组是常量了，可以在里面扩充数据numbers[10] = 11;，只是arr不能再指向其他对象，没有填充的部分就是empty;

20.css的加载不会阻塞DOM树的解析，但是会阻塞DOM树的渲染显示，也会阻塞后面的js的运行；解决办法，1.使用CDN，css压缩，缓存，减少http请求数

21.js的加载阻塞DOM树的形成显示，所以加载比较大的js文件时会是白板；因为加载的js中可能会创建，删除节点等，这些操作会对dom树产生影响，如果不阻塞，等浏览器解析完标签生成dom树后，js修改了某些节点，那么浏览器又得重新解析，然后生成dom树，性能比较差

22.css,js下载失败后，依然会进行DOM树的渲染显示；

23.//判断系统
            let u = navigator.userAgent;
            let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //g
            let isIOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
            if (isAndroid) {
                this.system = 'Android';
            } else if (isIOS) {
                this.system = 'IOS';
            } else {
                this.system = 'pc';
            }

24. <script>
        window.onload = function(){
            getRem(720,100)
        };
        window.onresize = function(){
            getRem(720,100)
        };
	window.onorientationchange = function() {
	    getRem(720,100)
	}
        function getRem(pwidth,prem){
            var html = document.getElementsByTagName("html")[0];
            var oWidth = document.body.clientWidth || document.documentElement.clientWidth;
            html.style.fontSize = oWidth/pwidth*prem + "px";
        }
        /*
        //小米官网的写法
        !function(n){
            var  e=n.document,
                 t=e.documentElement,
                 i=720,
                 d=i/100,
                 o="orientationchange"in n?"orientationchange":"resize",
                 a=function(){
                     var n=t.clientWidth||320;n>720&&(n=720);
                     t.style.fontSize=n/d+"px"
                 };
                 e.addEventListener&&(n.addEventListener(o,a,!1),e.addEventListener("DOMContentLoaded",a,!1))
        }(window);*/
    </script>

25.Vue中的指令一般用于初始化标签的时候定义标签的状态或者抽出来动态改变标签的状态，分为全局指令Vue.directive('demo',{bind(){},}),局部指令directives:{demo:{bind(el,binding){}}},抽出来通过mixins:[direcs],export const direcs = {directives: {demo: {bind(el){}}}}

26.在需要缓存的页面B中添加  beforeRouteLeave ：（和mounted是同级奥）。使用keep-alive处理页面不缓存的问题beforeRouteLeave(to, from, next) {
      if (to.name === 'C') {
        if (!from.meta.keepAlive) { // 当前进到C时
          from.meta.keepAlive = true; //当我们进入到C时开启B的缓存
        }
        next()
      } else { //当返回到A时
        from.meta.keepAlive = false;
        this.$destroy(); //销毁B的实例
        next(); //当我们前进的不是C时我们让B页面刷新
      }}

27.路由分类：
1)router上定义的全局路由(scrollBehavior(一般用户返回时上一个页面的位置缓存) beforeEach(全局路由，比如用于判断登录重定向) afterEach) 
2)组件内路由守护：
  监听'$route'(to, from){},比如入口文件index.js(用于处理页面前进后退的动画) 
  beforeRouteEnter (to, from, next) {
    // 注意，在路由进入之前，组件实例还未渲染，所以无法获取this实例，只能通过vm来访问组件实例
    next(vm => {})}
  beforeRouteUpdate (to, from, next) {
    // 在当前路由改变，但是该组件被复用时调用
    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
    // 可以访问组件实例 `this`
  }
  beforeRouteLeave (to, from, next) {
    // 离开当前路由页面时调用
  }
3）路由独享守卫，是路由独享守卫是在路由配置页面单独给路由配置的一个守卫
routes: [
        {
            path: '/',
            name: 'home',
            component: 'Home',
            beforeEnter: (to, from, next) => {
               // ...
            }
        }
    ]

28)组件每次进来都重新拉取网络数据的话，就在beforeRouteEnter里面的next((vm)=>{vm.loadData()}),这时就取消created里面的网络数据获取，不然会请求两次；

29)路由守护中的(to, from, next)=>{})to和from的match是一个数组，默认这个数组里面只有一个元素，且这个元素包含路由需要的所有信息，在做路由里面meta参数判断时，可以： // if (to.matched.some(r => r.meta.requireAuth)) {  // 判断该路由是否需要登录权限 或者 if (to.matched[0].meta.requireAuth) {}，通过watch来监听路由：‘route’(to,from) {} 中的to就是路由配置里面的对象了，如: to.meta.isBack = true;

30)ES6语法中的数组方法some和every,arr.some((item)=>{return item > 2}) 有一个为真就是真；every就是有一个为假就是假的

31)采用slot插槽，在主组件设定其位置和class样式，再引用组件也可以设置其样式，但是当样式属性与主组件的样式属性重名时，会以主组件的样式优先；
   
32)控制页面缓存办法：
   1.使用keep-alive默认让每个页面进行缓存；
   2.在动画的前进后退里面判断是前进还是后退，来改变当前路由的isBack；
   3.发起网络请求的时候还是写在mounted里面；
   4.在isactived里面判isback是否是前进还是返回,是返回就不请求数据；

33）具体的vue页面的路由对象可以在最外层的路由监听里面的to上实时获取，并在上面修改其属性值；

34)对于computed属性，只能监听自己组件的data里面的属性，没法监听vuex里面的属性的变化

35)Vue默认使用的就是hash，使用history会生成多个路径而这时就需要服务器来配合；

36)Vue中的懒加载是配合webpack的output来使用的，webpack打包会根据懒加载的组件的个数生成对应多个js文件，首次加载就只会加载自己需要的那个js文件了，dev下也会读取output里面的配置，且dev下会静态化output下面的所有生成的文件夹的文件，如下：
        filename: "js/[name].js",  
        path: path.resolve(__dirname, "dist"),
        publicPath: "http://172.23.1.151:9099/", // 子文件要获取到必须配置publicPath，不加会造成打包时拼接本地file://的地址
        chunkFilename: "js/[name].[chunkhash].js", // 管理懒加载生成的子文件的路径

37)dev下会静态化所有的publicPath+filename的文件和publicPath+outputPath+filename的文件，然后看devserver下的contentBase: path.resolve(__dirname)静态了谁，加起来就是所有被静态服务的文件了；

38）打包生产的文件中依赖的子文件路径会根据publicPath，filename，outputPath来确定的，同时dev调试模式下起服务会根据publicPath，filename，outputPath确定产生的文件的服务器路径和静态化这个路径，所以把这些配置好，调试的时候就可以直接调试了

39）webpack解析http://开头的网络图片时，不会使用对应的loader，而是将这个网络图片地址打进去，本地图片才会启动对于的loader；

40)Vue中的任意组件，包括父子组件，兄弟组件的通信可以通过EventBus(自己写的一个js文件，输出Vue实例对象)，派发消息用eventBus.$emit('事件名',参数)，监听事件在created生命周期里面用eventBus.$on('事件名',(params)=>{});

41）一般的滚动监听就用el.addEventListener('scroll',()=>{}),获取滚动的高度el.scrollTop,设置滚动到哪里：el.scrollTo(0,100);

42)window上面的方法和属性，在任何地方都可以直接拿来使用，只要不加this就好了，比如clearTimeout(timer)，在函数里面取这个局部函数，取不到就从全局里面去取，和全局变量使用一样

43)使用第三方组件比如：ant-design-vue的table时，如果发现定位和宽高不好控制，就在最外层用一个div包裹，给div进行定位，宽高，再把这个table放进来，滚动出去的话就设置这个div的overflow： scroll；

44)延时处理可以使用，const sleep = time => new Promise(resolve => setTimeout(resolve, time))，调用结合await即可








