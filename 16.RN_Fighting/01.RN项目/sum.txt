第一节课
1.安装命令加上—save是为了把第三方组件添加到package.json里面
2.图片放在webstorm工程，通过require加载时选择正常图片，但也要把@2x，@3x图加进来便于不同机型加载
3.可以在static propTypes={}中设置组件的类型检查：PropTypes.string PropTypes.element,PropType.bool,同时可以通过，设置默认属性：static defaultProps={}

第二节课
1.由于电脑系统的原因，暂时使用react-navigation@1.4.0,整体用法和最新版本差不多
2.页面的导航跳转必须在导航页面进行配置，在StackNavigator里面的第二个参数中navigationOptions可以全局设置导航样式{header: null},优先级最低,也可以在具体页面下单独设置导航样式和是否这个页面显示导航，优先级第二，也可以在具体页面的js文件里面设置:static navigationOptions = {()=>{}},优先级最高，且导航的样式如果要写成全局，最好就在导航的js文件里面设置
3.全局的navigationOptions会在页面加载完成后就调用，具体的某个页面的导航是在页面出现时调用，所有具体某个页面的导航的处理可以在两个地方，一个是配置导航的js中，优先级第二，另一个是具体页面中，优先级第一
4.可以先在navigationOptions里面设置导航title从navigatin.params.title里面拿，然后在navigation.setParams({title: ‘参数’})设置就会动态设置title了
5.可以直接将AppTabNavgator导出到根结点，这样就显示了tabbar但没有导航,为了有导航，可以将AppTabNavigator最为AppNavigator的一个screen，跳转进去即可
6.由于iOS和安卓使用的TabBar不一致，这个时候就需要用tabBarComponent属性自定义tabBar，tabbar之间的切换依然是this.props.navigation.navigate(‘Page2’)
7.自定义的tabBarComponent从this.props.navigationState里面拿到{routes,index},然后通过routes[index].params拿到参数，在这个页面js中通过设置setParams({theme: {}})来动态全局改变主题色

第三节课
1.ListView没有复用机制，所有item的渲染是全量的
2.VirturlizedList是flatList和SectionList的底层，在窗口之外的元素将会从组件结构上卸载达到回收内存的目的
3.RN中的Fetch是全局的，不需要导入
4.App启动(加载RN引擎)->index.js(js部分入口)->setup.js(组件和服务初始化)->首页
5.module.exports导入是同步的，导出本地文件，可以用于导出一个对象或者json数据或者一个class，或者是一个方法，当是一个方法的时候，外面在require或者import的时候，拿到的是这个function里面return的内容，使用export default也是一样拿到的是function中return的内容
6.从某个页面跳转到Tabbar里面，这里需要重置路由this.props.navigator.resetTo()，让页面不再回来到这个页面了
7.如果有计时器，可以在页面即将卸载的时候销毁计时器，componentWillUnmount(){}
8.StackNavigator外面还可以包装一层SwitchNavigator，用于重置导航，比如欢迎页跳转到框架页

第四节课
1.ios设备上阴影用shadowColor，shadowOffset等等，安卓上用elevation: 2来设置
2.AsyncStorage,简单的，异步的，持久化key-value存储系统，官方推荐，代替LocalStorage，iOS上，较少的数据会放在序列化字典中，大会在单独的文件中，Andriod会在：localDB／sqlite
3.导航条返回按钮，就单独在每个页面设置自己的，先用ViewUtil封装一个class中有方法返回一个带回调的返回按钮，然后在需要的页面导航配置上写： {
                headerLeft:ViewUtil.getLeftButton(()=>{
                    navigation.goBack()
                })
            }
4.export default class Text { static fetch() {}} 中用static定义的方法属于类方法，在外面必须要用这个类使用，不加static是对象方法，要new一下了再使用
5.react-native-check-box安装使用
6.export defualt class LanguageDao {constructor(flag) {this.flag = flag}} 在外面用对象方法时，要new一下时构造函数要传入flag，可以将flag的不同值作为一个对象export const FLAG = {flag1,flag2...}等导出，
7.监听整个界面各个组件有没有状态变化，可以定义一个空数组，再遍历这个数组，存在item就删除，不存在就加进去，最后看数组长度是不是为0来判断这个界面有没有变化
8.RN中的通知分iOS和安卓，通过Platform来区分，NativeAppEventEmitter.addListener("noticeName",(param)=>{})是iOS的，DeviceEventEmitter是安卓的，通过DeviceEventEmitter.emit('noticeName',param)来派发事件


第五节课
1.js中的对象比如数组和object，只要其地址是一样的，对象里面的元素改变了这个对象依然是这个对象，比如 tm = [];p = tm, p[0] = 1,那么 tm === p依然成立
2.子组件通过props接受父组件传递的数据显示UI，当父组件传递的数据有变化时，子组件是无法驱动响应改变UI的，这个时候分情况处理，当父组件有多个这样的子组件时，改变UI的事情就交给子组件自己处理（将数据通过状态机持有,然后将修改的源数据丢出去，或者在父组件里面自己处理源数据），当只有一个子组件时，可以获取子组件调用子组件的方法来处理
3.定义一个组件，让组件拥有系统的style={{}}，分三步走:
  A ViewPropTypes as RNViewPropTypes 在react-native里面
  B const ViewPropTypes = RNViewPropTypes || View.propTypes;
  C ...ViewPropTypes 写在属性里面 static propsType = {...ViewPropTypes}
  D 组件里面style={[this.props.style, styles.container]}
4.react-native-scrollable-tab-view渲染出来的时候，如果里面的tabLabel对应的界面数量很多且还不确定时就会一直闪烁，解决办法是先判断里面的界面数量计算出来没this.state.dataArray>0?<ScrollableTabView/>:null
5.Alert组件是两个平台都可以使用的
6.页面参数的传递通过导航也可以拿到的

第六节课
1.Text组件是无法识别网址的，可以使用react-native-htmlview组件来代替Text组件显示文本, 这个文本需要用一个p标签或者其他html的标签包裹，在stylesheet属性中定义各个标签的样式，网址一般是a标签，所以要给a标签样式:stylesheet={{a: {color: ‘red’}, p: styles.description}}
2.导入第三方组件的方式除了npm/yarn之外，还可以直接到github中找到源码拷贝到项目中来
3.export default 可以导出一个class，如果只是静态方法，不需要写constrctor，如果是对象方法，就写constructor(flag)传入参数，里面写的对象方法默认就是放在原形上的，如果导出构造函数，根本就没有constructor，构造函数本身持有属性如下，这个和导数对象方法创建的class对象是一样的，添加方法可以写在原型上也可以直接this.say = function() {}:
	export default function TimeSpan(showText, searchText) {
		this.showText = showText;
		this.searchText = searchText;
		this.say = function() {}
		this.proptype.eat = function() {}
	}

4.model其实就是数据模型，一般定义构造函数来承接，如上面3的定义方式
5.获取父组件中的所有属性，比如navigation等，直接在子组件中<Child …this.props/>即可

第七节课
1.使用系统导航navigationOptions与页面组件进行事件通信，两种方式: 第一种是使用通知中心，第二种通过定义一个ViewUtils的类，如果需要定义的组件的某个元素，就使用对象方法，否则就定义静态方法static，如this.viewUtils.getPopview(callback，title),传入回调，如需要传递其他参数，如title，点击事件时，触发回调(ref)=>{params.showPopver(ref)}将定义的组件的某个元素传递过来给页面组件,在页面组件的showPopver方法中要绑定this， setParams({
            showPopver: this._showPopver.bind(this),
            title: this.state.timeSpan.showText
        })，这个添加方法就在页面组件的componentDidMount生命周期函数中添加，title的改变就在页面组件的某个事件中通过setParams进行改变就能动态显示了
2.当navigation.params.title中的title第一次使用时不存在，会报undefined，这个时候可以使用try catch检测错误重新复制操作
3.当传递给子组件的props没有变化时一般不需要刷新组件，可以在componentWillReceiveProps(nextProps)中判断现在props和现在传递的props是否相等来做网络请求，或者让子组件做其他的事情
4.当父组件包裹的子组件要单独给点击事件时，子组件需要用TouchableOpacity包裹住，给TouchableOpacity添加onPress事件
5.当使用listView， flatList，sectionList时，传递数据给每个renderRow时，最好将这些数据定义成模型
6.导航和页面组件进行通信时，可以使用通知或者页面组件即将显示的时候传递setParams进去，传递方法进去，导航组件自己调用方法改变自己的UI时，由于页面无法通过状态机刷新，这个时候可以通过setParams，改变参数进行UI刷新；
7.做事件绑定时,如果作为参数传递的func，就直接在传递的时候做bind绑定即可,如果报错找不到bind，就在这个函数的最外层函数上做bind绑定
8.触发FlatList页面刷新的办法有1.获取数据赋值this.setState({dataArray: items})keyExtractor={()=>Math.random(2)}保证每个cell不一样,为提高渲染效率也可以使用设置keyExtractor={(model, index)=>model.item.id.toString() + model.isFavorite.toString()}将复用标记与变化的属性绑定起来
9.AsycStorage可以存储对象，不同于LocalStorage只能存储字符串，但是使用AsyncStorage时最好存储时转化成字符串，当存储对象时，取出来的就无法转JSON了
10.当一个组件里面的属性比较多时，可以定义一个方法，返回一个config对象，然后在这个组件中解构这个config对象；

第八节课
1.Image组件可以设置图片颜色: style={[{width: 40, height: 40},{tintColor: ‘red’}]}；
2.对于通用的组件可以使用全局样式编写或者使用自定义一个组件
3.研究新的第三方组件react-native-parallax-scroll-view，页面滑动隐藏导航,研究视频里面的这个页面的编写和写法
4.当一个组件的参数比较多时，可以用一个方法来返回这个config对象，最后在组件里面结构这个参数即可
5.研究视频中的AboutComom组件中的组装者模式
6.

第九节课
1.ES5的继承方式：bind是绑定了调用的对象，方法可以在后面的某个时期调用，apply是方法立即调用了，可以在第一个参数指定是谁来调用，参数是数组形式；call也是方法立即执行，参数散列形式；method.call(null, param),apply和call如果是自己调用自己的方法第一个参数就传递null，别人调用就传别人，一般是方法来调用apply或call，如果是构造函数调用了，就形成了继承，但是继承的是对象方法，而非原型上的方法；
function Animal(name,age) {}. function Dog(Animal.call(this, name,age)){}就形成了继承，还可以原型继承，ES中的extends继承
2.不管是props还是state的改变，都会引发render的重新渲染；
3.组件之间传递数据可以通过props，父组件的每一次render都会触发子组件的shouldComponentUpdate(newVal)，可以在这个方法里面判断是否需要调用子组件的render方法刷新子组件；


第十节课
1.异步的方式进行同步操作，async updateItems() {
      this.keys = await this.getData();
      if (this.keys) {}
},前提是await后面的方法返回的是一个promise，this.keys获取的是resolve里面的值
2.定义一个页面或者组件的handler工具类时，可以沿用页面的生命周期的函数的方法名，比如componentDidMount方法，在里面做网络请求了
3.伸缩列表，有几组就有几个bool值的状态机值来控制，然后在render函数中{this.state.showBlog?{this.getBlogs:null}}
4.Clipborad剪切板,Clipboard.setString(tab.account)，this.toast.show(‘已复制到剪切板’);
5.react-native-easy-toast弹框
6.请求回来后，可以判断this是否存在，这个页面还存不存在，来做一些逻辑，OC里面也一样；
7.看一些navigation有没有resetTo方法来重新加载Tabbar下面的页面；
8.通知:DeviceEventEmitter的进一步用法:
let ACTION_HOME = {‘flag1’: ‘flag1’, flag2:’flag2’}
DeviceEventEmitter.addListener(‘ACTION_HOME’, (action,params)=>{})
DeviceEventEmitter.emit(‘ACTION_HOME’, ACTION_HOME.flag1,params)
9.记住export default function test() {return {
}}，通过传入一个promise，进行包装后再丢出去，来控制promise的继续请求还是取消；
}}，在外面通过import拿到的就是return的对象，通过传入一个promise，进行包装后再丢出去，来控制promise的继续请求还是取消；
10.研究自定义弹框组件和视频源码中的通知；

第十一节课
1.RN版本升级，先全局安装react-native-git-upgrade，在执行这个更新命令，再解决冲突；
2.由于RN中没有float属性，所有想要横向排列每排3个就只能每三个View放到一个View里面，再将最外层的这个View的flexDirection：‘row’即可
3.明天研究以下这个主题设置时为什么一直直接使用this.props.theme？
4.各个页面定义主题可以采用继承的方式来封装接收通知，要实现super.componentDidMount()方法，根页面中state={theme:this.props.theme}，最初进来的时候要重本地去取theme，可以用一个静态方法取到主题就换算成一个主题对象，要做好...this.props的传递工作；

第十二节课(贾鹏辉的技术博客)
1.实现扩展时RN不支持，就需要自定义原生模块
2.iOS端，编写原生代码，暴露接口和数据交互(新增一个类遵循RCTBridgeModule协议)








