第一节课
1.RN环境配置: 
添加读写权限: sudo chown -R `whoami` /usr/local`
或sudo chown 777 /usr/local
或 macos 10.11有一个rootless防止恶意程序的最后防线，将这个权限关闭
1)将电脑重启按住CMD+R进入恢复模式
2）打开终端输入:$csrutil disable 关闭Rootless，$csrutil enable打开Rootless

2.安卓的环境安装:安装JDK环境 下载andriod stutio并配置 下载安卓虚拟机和模拟器 安装eclipse(这个先不安装)
  补充安装:apache服务器(先不安装)，初始化第一个RN项目
 

第二节课
1.启动本地的服务器: react-native start,然后打开xcode，cmd+r
2.目录结构:
3.管理RN版本:
  查看版本: react-native -v
  更新版本: cnpm update -g react-native
  查询网上最新RN版本 cnpm info react-native
  升级或降级RN版本
  cnpm i —-save react-native@0.XX.X
4.安装自动设别语法的插件，在资料里面
5.安装最新版本0.45及以上版本会需要下载boost等几个第三方库编译，这些在国内很难下载成功，导致无法运行，建议下载地版本0.44.3
  $ react-native init MyApp --version 0.44.3


第三节课
1.AppRegistry注册 StyleSheet样式 Text文本组件 View视图组件 Image组件
2.Text才能承载文字，且Text组件也是一个块级的，其他的组件不行
3.flexDirection, 默认是column，纵向排布，row是横向排布，如果是横向排不下，就从左到右排布
4.tab键多了就用shift+tab回来即可
5.在RN中定义的View在原生上就是一个UIView，可以通过Xcode看层次结构
6.超出了主轴方向的宽度，默认会超出不显示且不会换行，可以定义:flexWrap: ‘wrap’,默认是nowrap
7.alignItems：是作用在侧轴上的，统一管理子组件，当它设定都，如果单独需要设置子组件在侧轴上的布局，就在具体子组件上使用itemSelf: ’flex-start’设置自己在侧轴方向的布局，覆盖父标签的设置，默认为auto，表示继承

第四节课
1.跑到真机上，需要将localhost改成本机的IP地址，将bundleId改成自己需要的，单元测试的team也需要设置
2.摇一摇就出现了调试栏目
3.flex布局子布局内部的子组件，Text组件里面文字不属于子组件
4.Image组件的resizeMode:’contain’ 等比例缩放，stretch拉伸，cover默认

第五节课:
1.设置Text组件的背景图片，可以将Text组件包含在Image组件里面，设置Text组件的背景颜色为透明:backgroundColor: ‘transparent’即可,相当于将Image作为一个父控件，里面包含Text子控件,Text组件的背景颜色默认和父控件的背景颜色相同
2.当子控件没有设置宽度时，会默认继承父控件的宽度，设了宽度就按自己的宽度来
3.调试: CMD+d然后选择Remote Debug JS，检查即可
4.本地的文档数据，如JSON数据，可以直接require(‘/Data.json’)就获取到了
5.在for循环中创建的组件需要加一个key={i}属性
6.组件的所有属性都是用{}括起来的，字符串就是{‘字符串’}形式
7.TextInput组件设置了多行显示，password效果就没有了
8.iOS独有的属性在安卓上只是无效，不会报错
9.定义新的组件js文件，使用commonJS语法，导入时使用require()

第六节课
1.TouchableOpacity包裹需要点击的组件，activeOpacity点击下去的透明度，0-1之间；
2.onPress里面是需要回调的来执行其他方法的，一般采用ES6语法进行回调
3.状态机state，里面可以放很多全局属性，当里面的值发生变化，就会触发刷新整个页面,性能已经最优，虚拟DOM


第七节课
1.使用ES6的语法引入自定义的组件，在组件内部本身就有export default，所以可以不用module.exports，在页面里面就不要使用require引入了，而是可以用import引入，但需要加路径import Test from ‘./dome4’路径写对
2.Props 属性，都是只读属性，只能外面传递进来，state 状态，每个组件有一个系统的setState方法来改变状态，而且刷新界面，调用的就是render函数
3.componentWillMount页面即将出现时,render函数刷新UI，componentDidMount页面已经出来网络请求，componentWillUpdate状态机发生改变调用，不是生命周期方法，第一次不会调用
4.class里面的方法都是对象方法，用this来调用，onPress时，需要走回调触发，全局函数不写在class里面，const btnClick=()=>{Alert.alert(‘来了’)}，在onPress里面不需要走回调，可以直接调用
5.拿到虚拟DOM节点的方式和Vue是一样的，采用ref=“topView”和this.$refs.topView拿到
6.状态机的定义就在类里面state={title: ‘默认值’}，只读属性props的定义 static defaultProps={age: 18}拿取的方式是this.props.age


第八节课
1.scrollView只有设置高度才能工作，且里面的手势都被scrollView吃了
2.在工程中添加images文件夹，使用require来获取时只能获取静态的图片，因为require会在运行前提前加载进来了，如果真的要动态的加载本地图片，就放到项目xcode工程imagesets里面去
3.通过uri获取的图片必须要给宽高，不然看不到


第九节课
1.出现意想不到的错误，可以关闭服务重启试试
2.ListView中的renderRow函数是一个function回调函数，可以使用{(rowData, sectionID, rowID, highlightRow)=>this.renderRow(rowData, sectionID, rowID, highlightRow)}也可以使用{this.renderRow}这样直接就把系统分配的参数默认全部拿到了
3.ListView自己设置宽高是无效的,默认宽高是填满父组件的剩余的宽高，即flex:1默认的，要改变ListView的宽高，必须改ListView添加一个View包裹起来，然后设置这个View的宽高


第十节课
1.RN中scrollView组件可以通过scrollTo({x:100,y:100,1000})定义偏移，但在js中，要实现动画偏移，可以先设置transition: all 0.5s,然后通过改变el.style来改变位置实现偏移；









