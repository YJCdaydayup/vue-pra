第一节课
1.RN环境配置: 
添加读写权限: sudo chown -R `whoami` /usr/local`
或sudo chown 777 /usr/local
或 macos 10.11有一个rootless防止恶意程序的最后防线，将这个权限关闭
1)将电脑重启按住CMD+R进入恢复模式
2）打开终端输入:$csrutil disable 关闭Rootless，$csrutil enable打开Rootless

2.安卓的环境安装:安装JDK环境 下载andriod stutio并配置 下载安卓虚拟机和模拟器 安装eclipse(这个先不安装)
  补充安装:apache服务器(先不安装)，初始化第一个RN项目
 

第二节课
1.启动本地的服务器: react-native start,然后打开xcode，cmd+r
2.目录结构:
3.管理RN版本:
  查看版本: react-native -v
  更新版本: cnpm update -g react-native
  查询网上最新RN版本 cnpm info react-native
  升级或降级RN版本
  cnpm i —-save react-native@0.XX.X
4.安装自动设别语法的插件，在资料里面
5.安装最新版本0.45及以上版本会需要下载boost等几个第三方库编译，这些在国内很难下载成功，导致无法运行，建议下载地版本0.44.3
  $ react-native init MyApp --version 0.44.3


第三节课
1.AppRegistry注册 StyleSheet样式 Text文本组件 View视图组件 Image组件
2.Text才能承载文字，且Text组件也是一个块级的，其他的组件不行
3.flexDirection, 默认是column，纵向排布，row是横向排布，如果是横向排不下，就从左到右排布
4.tab键多了就用shift+tab回来即可
5.在RN中定义的View在原生上就是一个UIView，可以通过Xcode看层次结构
6.超出了主轴方向的宽度，默认会超出不显示且不会换行，可以定义:flexWrap: ‘wrap’,默认是nowrap
7.alignItems：是作用在侧轴上的，统一管理子组件，当它设定都，如果单独需要设置子组件在侧轴上的布局，就在具体子组件上使用itemSelf: ’flex-start’设置自己在侧轴方向的布局，覆盖父标签的设置，默认为auto，表示继承

第四节课
1.跑到真机上，需要将localhost改成本机的IP地址，将bundleId改成自己需要的，单元测试的team也需要设置
2.摇一摇就出现了调试栏目
3.flex布局子布局内部的子组件，Text组件里面文字不属于子组件
4.Image组件的resizeMode:’contain’ 等比例缩放，stretch拉伸，cover默认

第五节课:
1.设置Text组件的背景图片，可以将Text组件包含在Image组件里面，设置Text组件的背景颜色为透明:backgroundColor: ‘transparent’即可,相当于将Image作为一个父控件，里面包含Text子控件,Text组件的背景颜色默认和父控件的背景颜色相同
2.当子控件没有设置宽度时，会默认继承父控件的宽度，设了宽度就按自己的宽度来
3.调试: CMD+d然后选择Remote Debug JS，检查即可
4.本地的文档数据，如JSON数据，可以直接require(‘/Data.json’)就获取到了
5.在for循环中创建的组件需要加一个key={i}属性
6.组件的所有属性都是用{}括起来的，字符串就是{‘字符串’}形式
7.TextInput组件设置了多行显示，password效果就没有了
8.iOS独有的属性在安卓上只是无效，不会报错
9.定义新的组件js文件，使用commonJS语法，导入时使用require()

第六节课
1.TouchableOpacity包裹需要点击的组件，activeOpacity点击下去的透明度，0-1之间；
2.onPress里面是需要回调的来执行其他方法的，一般采用ES6语法进行回调
3.状态机state，里面可以放很多全局属性，当里面的值发生变化，就会触发刷新整个页面,性能已经最优，虚拟DOM


第七节课
1.使用ES6的语法引入自定义的组件，在组件内部本身就有export default，所以可以不用module.exports，在页面里面就不要使用require引入了，而是可以用import引入，但需要加路径import Test from ‘./dome4’路径写对
2.Props 属性，都是只读属性，只能外面传递进来，state 状态，每个组件有一个系统的setState方法来改变状态，而且刷新界面，调用的就是render函数
3.componentWillMount页面即将出现时,render函数刷新UI，componentDidMount页面已经出来网络请求，componentWillUpdate状态机发生改变调用，不是生命周期方法，第一次不会调用
4.class里面的方法都是对象方法，用this来调用，onPress时，需要走回调触发，全局函数不写在class里面，const btnClick=()=>{Alert.alert(‘来了’)}，在onPress里面不需要走回调，可以直接调用
5.拿到虚拟DOM节点的方式和Vue是一样的，采用ref=“topView”和this.$refs.topView拿到
6.状态机的定义就在类里面state={title: ‘默认值’}，只读属性props的定义 static defaultProps={age: 18}拿取的方式是this.props.age


第八节课
1.scrollView只有设置高度才能工作，且里面的手势都被scrollView吃了
2.在工程中添加images文件夹，使用require来获取时只能获取静态的图片，因为require会在运行前提前加载进来了，如果真的要动态的加载本地图片，就放到项目xcode工程imagesets里面去
3.通过uri获取的图片必须要给宽高，不然看不到


第九节课
1.出现意想不到的错误，可以关闭服务重启试试
2.ListView中的renderRow函数是一个function回调函数，可以使用{(rowData, sectionID, rowID, highlightRow)=>this.renderRow(rowData, sectionID, rowID, highlightRow)}也可以使用{this.renderRow}这样直接就把系统分配的参数默认全部拿到了
3.如更新了dataSource数据，每次重新调用cloneWithRows，如果用到了组，就调用cloneWithRowsAndSections方法


第十节课
1.cloneWithRowsAndSection(dataBlob,sectionID，rowID),dataBlob是一个对象object，是每一组数据，包含当前组所有的cell信息和组头的信息,sectionID 哪一组，rowID哪一行
2.getRowData(sectionID,rowID)获取哪一组那一行的数据
3.getSectionHeaderData(sectionID)获取哪一组组头信息

第十一节课
1.每个TabbarItem下都有一个selected属性来控制这个Tbbar下的View的显示，可以每个TarbarItem都有，但是以最后一个为准；
2.Navigator在react-native中已经被废弃了，但它的使用原理还是要清楚：
  <Navigator
    initialRoute={{component: FirstView,name=“Sara”}} // 参数最好写在这里，好跳转的时候统一管理参数
    renderScene={(route,navigator)=>{return (
	<FirstView name={route.Sara} title=“我是标题” navigator={navigator}/>
	或:由于这个参数route就是上面的initialRoute，所以可以写成:
	<route.component title=“我是传递参数title” navigator={navigator}/>
    )}}
   />
3.组件之间传递参数分两种情况，第一种是页面中添加组件时，将页面的数据传递给组件做显示，就直接<CCZQView title=“this.state.title”>，CCZQView组件内部可以通过this.props.title拿取，第二种是页面跳转时传递：先导入页面，然后this.props.navigator.push({
   component: SecondView,
   name: “我是任意的参数，key不一定要是name”
}),这样push就意味着往initialRoute里面添加了一个路由，然后会再次调用renderScene，如果renderScene里面写死了某个View就会一直加载这个View陷入死循环了，所以renderScene={{route,navigator}=>{return (
  <route.component title=“参数1” navigator={navigator}>
)}}
4.函数是谁调用的，那么函数里面的this就是谁，如果要在调用的函数里不管哪里都拿到的是全局this，可以在调用时进行一次动态绑定，onPress={this.viewClick.bind(this)}即可
5.Navigator的转场动画，configureScene={()=>Navigator.SceneConfigs.FloatFromRight}写在Navigator标签里面
6.initialRoute定义第一个根视图的时候，参数最好统一放在一个对象里面，params: {}:
  <Navigator
    initialRoute: {{
       component: FirstView,
       params: {
 	 title: ‘第一个视图’，
 	 haha: ‘哈哈’，
 	 hehe: ‘呵呵’
       }
    }}
    renderScene={(route,navigator)=>{
	<route.component {…route.params} nav={navigator} // 在这里结构参数，就不用写传递参数了
    }}
    configureScene={()=>{	
	Navigator.SceneConfigs.FloatFromBottom
    }}
  />
7.https://blog.csdn.net/theVicTory/article/details/80059632 查看最新导航和tabbar的文档

第十二节课
1.pop回去的方式是：this.props.navigation.pop();
2.逆向传值,
  思路1: params传值时把第一个View的this传递过去，pop时让this调用自己的某个方法改变状态机的某个值刷新界面；
  思路2: push时传递一个方法过去，然后pop时调用这个方法：
	viewClick() {
	   component: SecondView,
	   params: {
	     title: ‘这是第二个界面’，
	     getUserName: function(user) {
		this.setState({
		   userName: user
		})
	     }.bind(this) // 这里一定要绑定this，意味着调用这个getUserName方法里面的所有this就是原始的this
	   }
	}
   pop时，if(this.props.getUserName) {this.props.getUserName} {this.props.getUserName(‘全世界最帅的男神 ’)}
3.回调函数非0即真，这个和iOS是一样的，如上

第十二节课
1.在RN的项目里面添加原生代码，名字要定义成带有manager的，比如CCZQViewManager，然后引入requireNativeComponent, 在引入let CCZQView = requireNativeComponent('CCZQView', null)，就可以直接使用CCZQView；
2.在原生里面返回的View的样式必须在js文件里面写，而且原生里面的View和对应的js里面的组件的View没有布局上的联系
<<<<<<< Updated upstream
3.iOS项目上的原生只能在iOS上，安卓的也是要按照andriod的写
4.定义原生的类带有Manager，如HankViewManager，在RN里面就要去掉manager，不带有manager，就可以写全名

第十三节课
1.js es6(es2015-2017) react flexbox AsynStorage本地存储 Fetch网络请求 Native Modules封装原生组件供RN调用 
2.第三方库: react-native-check-box复选框 react-native-easy-toast react-native-splash-screen启动屏 react-native-htmlview渲染Html react-native-scrollable-tab-view标签切换 react-native-sortable-listview列表 react-native-tab-navigator底部导航 react-native-parallax-scroll-view视差滚动 自定义NavigationBar 自定义MoreMenu 自定义启动屏
4.在已经写好的项目里面添加RN模块，最好是重新建立RN工程添加原生模块进行开发

5.react-navigation必须在最新的RN版本上使用，使用前要依赖yarn add react-navigation和yarn add react-native-gesture-handler，而且要react-native link一下才行
6.每个在CreateStackNavigator中添加的页面，默认在它的props里面带有navigation属性，跳转的时候，navigate('Detail')会判断这个栈里面没有这个页面才进行跳转，有的话就没反应，push('Detail')会一直跳转新的页面，goBack()里面不带参数返回上一页面，popToTop()返回最上面的页面
7.this.props.navigation.navigator('Home')没有这个跳转到这个页面，有，就返回到这个页面，不能返回和跳转到和自己route相同的页面，用于返回到栈里面的某个页面
8.let {navigation} = this.props; 拿取对象某个属性的另一种办法建议使用避免太多变量名，一般在刷新UI的时候render函数里面拿取传递参数，navigation.getParam('itemID','默认值')
9.通过打印navigation对象可以看到state里面params对象下有要传递的参数和页面的key值
10.static navigationOptions可以是直接的字面量对象也可以是函数返回对象:
  static navigationOptions = ((navigation)=>{
     return  {
	title: navigation.getParam("otherParam",'默认值')
     }
  })
11.修改导航参数，this.props.navigation.setParams({     itemID: 16888888888	  }),就修改了props，也会刷新UI
12.改变页面中导航文字为图片或者自定义的其他组件，可以在navigationOptions里面设置headerTitle: <LogoTitle title="传递过去的参数"/>
13.也可以修改左右导航按钮: headerLeft和headerRight，
14.可以单独在页面自己的js文件里面写导航的样式(优先级最高)，也可以在navigation.js里面统一写导航的样式:
   createStackNavigator({
      “Home”: {
	screen: 'HomePage',
	navigationOptions: {(navigation)=>{return {}}}
      }
   },{
      initialRouteName: 'Home',
      defaultNavigationOptions: ((options)=>{
	headerLeft: <BackButton navigation={options.navigation}/>
      })
   })，每个页面导航的样式也可以单独在这个js文件里设置

第十四节课
1.进npm官网学习react-navitve-scrollable-tab-view的使用
2.onScroll={(postion)=>{}} 触发的次数不多，精准度非常高
3.onChangeTab回调函数 lock={true} renderScrollTabView回调函数
4.renderTabBar={()=>{return (<CustomTabbar/>)}}进行tabbar的自定义
5.自定义HKTabBar非item，参考文档
6.传递的属性this.props一般是前面写好后面直接通过this.props.navigation调用，也可以提前定义好:
  static propTypes = {goToPage: React.PropTypes.array}











