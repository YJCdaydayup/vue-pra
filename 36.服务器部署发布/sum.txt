第一节课
1.生产环境所需元素：
  域名 服务器 域名备案 配置服务器应用环境（nginx 权限 nodejs环境 ssl证书 防火墙）数据库（可以使用本地数据库或者云数据库 角色 权限 读写机制） 远程部署发布／更新

第二节课
1.将代码可以托管到git仓库，每次提交到git仓库，然后在服务器上部署时都从git仓库拉代码进行部署
2.购买一个域名，然后分配出二级域名
3.一个nginx服务器来代理转发多个应用程序的服务

第三节课 狼烟滚滚jeff 
域名：通过阿里云购买
1.阿里云的方便备案 DNSPOD 爱名网
2.域名纯英文好些，越短越好
3.可以在爱名网上查看这个域名有没有被注册
4..cn便宜点
5.可以先不够买SSL证书，可以生成免费的证书
主机
1.国外 亚马逊AWS Linode DigitOcean／Heroku
2.国内 阿里云ECS推荐 青云／UCload／百度云 推荐 审核备案方便 远程快
3.镜像选择Ubantu 64位1404 
4.学习使用的话就选按量付费
5.设置密码：root用户
6.购买后进入控制台可以看到外网ip 
7.阿里云的域名备案
8.登录-备案-备案服务号申请-申请-去备案-提交资料等三周-

第四节课
1.47.115.140.196外网地址 登录$ ssh root@47.115.140.196 vnc的264186
2.查看云服务器上有几个盘：$ fdisk -l
3.查看硬盘的使用情况：$df -h
4./dev/vda1        40G  1.9G   36G   5% / 就是系统盘
5.在MAC电脑上安装经常要用的命令的别名：打开.bash_profile或者.zshrc文件，加上：alias ws="open -a /Applications/WebStorm.app ./“，然后source一下即可
6.root权限太大可以增加用户,给每个用户添加权限
$ adduser sara  密码sara // 每个用户进来的操作是自己的空间
$ gpasswd -a sara sudo // 升权：给这个用户添加root权限但是每次要输入密码
$ sudo vi /etc/ssh/sshd_config // 打开一个配置，,找到root那里，增加：sara ALL=(ALL:ALL) ALL // 就是给权限配置
保存，ctrl + X -> shift + Y -> 回车
$ service ssh restart // 重启ssh
$ ssh sara@47.115.140.196 // 新开一个终端，登录创建的这个用户，这个用户下的操作就是二级权限做的，但是可以加sudo做root做的事情
7.SSH 无密码登录 服务器持有本地公钥即可
本地（已经有ssh公钥／私钥）
$ eval “$(ssh-agent -s)” // 开启ssh代理
$ ssh-add ~/.ssh/id_rsa  // 将私钥加到ssh代理中 
服务器
$ ssh-keygen -t rsa -b 4096 -C "sara@imooc.com" // 重新生成
$ eval "$(ssh-agent -s)" // 也开启代理
$ ssh-add ~/.ssh/id_rsa  // 将私钥加到ssh代理中
$ vi .ssh/authorized_keys // 创建权限配置文件
再将本地的ssh里面的公钥拷贝进服务器的authorized_keys文件里面
$ chmod 600 authorized_keys // 修改这个文件的权限
$ sudo service ssh restart  // 重启ssh

第五节课 研究iptables
增加登录安全等级：
1.默认的登录服务器端口是22

2.修改默认端口:(修改时最好先开一个窗口以备修改错了通过这个窗口能进去修改回来)
$ vi /etc/ssh/sshd_config 
1)修改默认登录端口
0-1024 一般被系统占用
1025-65536 可以使用
2)保证UseDNS 为no
3）AllowUsers sara root  // 增加了这个就默认只有sara可以登录了，root也不可登录,要登录root AllowUsers sara root 
4)带端口登录：ssh -p 3999 sara@47.115.140.196

3.关闭root登录权限：PermitRootLogin no
4.可以取消使用密码登录，密码不能为空

5.防火墙：iptables 进／出 
参考：http://www.zsythink.net/archives/1493
1) sudo apt-get update && sudo apt-get upgrade // 升级ubantu
2）sudo iptables -F // 清空所有的规则
3) sudo vi /etc/iptables.up.rules // 编写防火墙规则
4）sudo iptables-restore </etc/iptables.up.rules  // 启用这些规则
5) sudo ufw status // 查看防火墙是否激活
6) sudo ufw enable // 激活防火墙
7) sudo vi /etc/network/if-up.d/iptables // 创建脚本,开机自动启动
8) chmod +x /etc/network/if-up.d/iptables
9) 安装 sudo apt-get install fail2ban
10）sudo vi /etc/fail2ban/jail.conf  // 修改下fail2ban的配置
11）sudo service fail2ban status // 查看fail2ban的运行状态
12) sudo service fail2ban start/stop // 开启／关闭fail2ban

第六节课 
1.sudo apt-get update // 更新系统 
2.安装相关包文件
$ sudo apt-get vim openssl build-essential libel-dev wget curl git
$ 安装node工具，先安装nvm，进nvp的github找到安装的命令：wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash // 安装nvm, 然后配置一下.bashrc，根据git文档的要求
$ nvm install v6.9.5 // 安装6.9.5版本的node工具
$ nvm use v6.9.5 
$ nvm alias default v6.9.5 // 默认一下
$ node -v  // 查看node版本 
$ npm - -registry=https://registry.npm.taobao.org install -g npm // 从淘宝镜像源处更新npm
$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
$ npm - -registry=https://registry.npm.taobao.org install -g cnpm // 通过npm安装cnpm
$ cnpm sync koa // 强制从npm将这个模块同步到国内的镜像上去
$ npm i pm2 webpack gulp grunt-cli -g // 安装常用的工具,全局的话加：-g
$ 如果安装不了就强行指定源：npm - -registry=https://registry.npm.taobao.org install -g pm2
3.阿里云的防火墙设置还有个地方就是网页里面的安全组规则那里
$ 采用pm2启动服务： $ pm2 start app.js $ pm2 list $ pm2 show name

第七节课 研究nginx
1.使用root级别的权限启动对80端口的监听，同时把80端口的流量分配给另外一个端口，实现代理
2.安装nginx：
$ update-rc.d -f apache2 remove // 先删除本地的apache
$ sudo apt-get remove apache2 // 清理干净 
$ sudo apt-get update // 更新包列表
$ sudo apt-get install nginx // 安装nginx
$ nginx -v // 查看nginx版本
$ /etc/nginx/conf.d // 进来这个nginx配置目录
$ sudo vi jeff-com-8081.conf // 创建配置文件
$ sudo nginx -t // 检查配置文件是否语法正确
$ sudo nginx -s reload // 重新启动nginx, 查看请求头可以看到：Server: nginx/1.4.6 (Ubuntu)
$ sudo vi nginx.conf // 找到 server_tokens off 打开
$ sudo service nginx reload // 重仔ngin

第八节课
1.域名是需要一个域名解析器的，通常可以在阿里云 Godaddy DNSPOD购买
2.域名需要提供一个DNS地址用于解析这个域名
3.最好是用DNSPOD上面，大厂商方便备案，将域名解析地址拷贝进阿里云域名管理下，
4.A记录：将域名映射到一个ip地址
5.阿里云购买域名后默认是有DNS服务器绑定的，但是我们还是选择DNSPOD来处理，进入DNSPOD问题管理，找到问题中心把两个地址拷到阿里云的DNS修改那里修改DNS解析后台为DNSPOD后台
6.然后在NDSPOD控制台的云解析模块添加我在阿里云上买的那个域名，添加解析规则条件
7.两个地址：
DNSPOD后台：https://console.cloud.tencent.com/cns/detail/iucen121.top/records/0
阿里云：https://dc.console.aliyun.com/next/index?spm=5176.12818093.recommends.ddomain.488716d0A2b9vk#/domain/list/all-domain
8.A记录：是将一个域名映射到一个服务器的ip地址
9.CNAME：别名，如果需要一个域名指向另一个域名，再由另一个域名提供ip地址
10.MX：如果需要设置邮箱，让邮箱收到邮件，需要添加MX记录
11.TXT：可以填写任何东西，长度255，一般用于SPF记录反垃圾邮件
12.TTL: 超时时间，超时后会重新到DNSPOD上解析获取一个记录值
13.域名解析：就是通过域名解析服务器DNSPOD解析主机记录其实就是一个筛选后得到记录值是ip地址或者一个新的域名再进行访问
14.主机记录就是最先的筛选条件：www，@，*，mail，abc(随意单词就是二级域名了)
15.七牛上做服务器存储添加域名时会要求你的域名先备案
16.在七牛上找到你的资源对应的域名然后在DNSPOD域名解析的记录那里选择CNAME，这样就是一个域名指向七牛的另一个域名了

第九节课
1.可以采用阿里云数据库服务比如；mongodb，mysql
理解一下：
$ /etc/apt 里面管理着各种包，当使用sudo apt-get update就会查找source-list-d下面的文件去下载，默认使用的是他们自己的源，可以在对应的source文件夹下改变各个插件的下载源头
如：http://mirrors.aliyun.com/mongodb/...
2.一般来说就是一台服务器跑应用，一台服务器用来装数据
3.安装mongodb：
$  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
// 然后在/etc/apt/source_list_d目录下改变mongo的源为aliyun的源
$ sudo apt-get update
$ sudo apt-get install -y mongodb-org // 最后安装
$ sudo mongod // 开启mongodb服务
$ 默认的配置都会在etc文件夹下面
$ sudo mongodump -h 127.0.0.1:27017 -d dbname -o(导入的新文件) filename -u 用户名 -p 密码 // 批量备份本地mongodb数据
$ tar zcvf indust-app.tar.gz originfile(需要打包的文件夹)
$ scp -P 22 /Desktop/indust-app.tar.gz jeff@47.115.140.196:/home/jeff/dbbackup // 上传本地文件到服务器
$ /home/jeff 就是当前用户的根目录
$ tar xvf indust-app.tar.gz  // 对这个文件解压缩
$ mongorestore —-host 127.0.0.1:27017 -d dbname ./indust-app // 将备份数据批量导入数据库中
$ mongoexport -d dbname -c students -q ‘{name: {$ne: null}}’ -o ./ // 导出students表中name不为空的所有数据
$ mongoimport -d dynamo -c students —drop 文件
$ 一般可以先导入数据再设置用户权限
4.不同数据库的权限控制
$ mongoddb没有默认的管理员账号,所以先创建admin
$ use admin // 必须先切换到admin数据库才能进行
$ db.createUser({user: ‘jeff_cases_owner’,pwd: ‘123456’,roles: [{role: ‘userAdminAnyDatabase’,db: ‘admin’}]}) // 创建admin用户来管理admin数据库
$ db.auth('jeff_cases_owner','123456') // 对jeff_cases_owner用户进行授权
// 必须先切换到students数据库下才能进行以下操作：
$ db.createUser({user: 'imooc_runner',pwd: '123456',roles: [{role: 'readWrite',db:'students’}]}) // 创建imooc_runner用户对students数据库具有读写权限
$ db.createUser({user: 'imooc_runner_reader',pwd: '123',roles: [{role: 'read',db:'student’}]}) // 创建一个imooc_runner_reader对数据库students指具有读的权限
// 切换到imooc_up数据库
$ db.createUser({user: 'imooc_up_runner',pwd: '123',roles:[{role: 'readWrite',db: 'imooc_up'}]}) // 创建主用户imooc_up_runner
$ db.createUser({user: 'imooc_up_runner_helper',pwd: '123',roles:[{role: 'read',db: 'imooc_up'}]}) // 创建备份只读用户imooc_up_runner_helper
// 每次以上操作后就切换到admin，进行一次认证操作,这样才能把上面创建的用户权限加入到db.system.user里面去生效
$ db.auth('jeff_cases_owner','123456')
// 进入sudo vi /etc/mongod.conf编辑，security: authorization: ‘enabled’
// sudo service mongod restart // 重启mongodb
// mongo —port 27017 进入mongodb终端模式
// 此时要进行mongodb的操作必须先进行验证：
$ db.auth('jeff_cases_owner','123456') 
$ exit 退出
// 如果要直接进入某个数据库
$ mongo 127.0.0.1:27017/imooc_up -u imooc_up_runner -p 123 // 此时进来的数据库就是这个用户的数据库，但是他此时只能操作这个数据，没发看到或者操作别的数据库
$ mongodump -h 127.0.0.1:27017 -d imooc_up -u imooc_up_runner -p 123 -o indust-app-old // 导出数据库(即备份)
$ mongoexport -h 127.0.0.1:27017 -d imooc_up -u imooc_up_runner -p 123 -c imooc_up -q ‘{"name": {$ne: ""}}‘ -o ./indust_old_json.json // 导出具体一个表
// 将服务器的资源下载到本地
$ scp -P 22 jeff@47.115.140.196:/home/jeff/db/indust-app-old/imooc_up.old.gz.zip ./
$ scp -P 22 /Desktop/indust-app.tar.gz jeff@47.115.140.196:/home/jeff/dbbackup // 上传本地文件到服务器 和上面下载只是服务器地址的位置相反
$ scp -P 22 jeff@47.115.140.196:/home/jeff/db/indust-app-old/indust_old_json.json ./ // 也将json文件下载到本地来
// 练习将本地的文件上传到服务器的某个文件夹 
$ scp -P 22 ./test.ipa jeff@47.115.140.196:/home/jeff/other_db
$ db.createUser({user: 'des',pwd:'123',roles: [{role: 'readWrite',db: 'des_imooc'}]} // 创建新的数据库
// 进入数据库要操作admin权限的是事情就要auth管理员的账户，如果要查看具体某个数据库的信息则需要再次验证这个数据库下的用户auth，记住，要先切换到这个数据库下在auth，如果直接查看某个数据库就要先知道这个数据库名称然后切换过来后进行auth才能做其他操作
// 某个数据库只要设置了用户管理，那么每次操作这个数据就需要先切换过来后进行auth才行
// 批量导入
$ mongorestore -h 127.0.0.1:22 -d des_imooc -u des -p 123 file 

4.数据库的备份
$ 在根目录创建一个脚本，具体查看这个脚本，然后在脚本里面通过mongodump进行备份，tar zcvf压缩到指定文件，灾备的话最好上传云数据库服务器
$ 直接使用 cd命令就是自动回到根目录了
$ crontab -e // 这里面可以写定时任务，执行上面的脚本: 17 22 * * * sh /home/jeff/task/movie.back.sh
$ 上传文件到私有云七牛上面：
   1) 通过node执行js代码外部传递参数
   2) node file.js/node file(默认就会找file文件夹下的index.js文件)
   3) 可以通过命令来调用node file.js文件，传递参数是：
   调用：NODE_ENV1=参数1 NODE_ENV2=参数2 node file.js (理解成：{NODE_ENV1: 参数1,NODE_ENV2: 参数2}
   获取参数：process.env.NODE_ENV1就是获取参数值1

  
第十节课（开始部署服务器流程）
1. 配置git仓库的ssh，先生成RSA公钥和私钥,如下，再将公钥拷贝到git仓库的ssh验证中，然后通过ssh地址clone代码即可
$  ssh-keygen -t rsa -b 4096 -C "sara@imooc.com" // 会生成到.ssh文件夹下
2. 将本地仓库关联到远程仓库
$ git remote add origin git@gitee.com:yang_li123/class_ss.git // 前提是空的仓库
3. 管理代码更新和服务器的重启：pm2 ，守护服务，自动更新
本地步骤:
$ 1.创建ecosystem.json,配置里面的apps和deploy，deploy下的production这个名称要与后面的本地命令中的一致
$ pm2 deploy ecosystem.json production  setup // 执行后回连接到服务器，根据里面的配置创建三个文件，同时通过pm2也将git仓库与服务器关联起来了
$ 将项目拷贝到本地来并将ecosystem.json文件提交到git仓库里面
服务器：
$ 1. 创建对应的文件夹： sudo mkdir /www/class_ss
$ 2. 给class_ss文件夹增加权限： sudo chmod 777 class_ss
本地开始启动node服务
$ pm2 deploy ecosystem.json product // 启动服务器的服务
$ 如果报错，pm2 command not found，就到.bashrc里面把第一个判断代码注释掉

4. 到DNSPOD里面配置域名解析，A记录
5. 本地数据迁移到服务器：
$ mongodump
$ tar zcvf 
$ scp -P 
$ tar xvf
$ db.createUser({user: 'first',pwd: '123',roles: [{role: 'readWrite',db: 'bjss'}]}) // 必须先做admin验证,然后use bjss切换到这个数据，就开始创建这个用户
$ mongorestore -h 127.0.0.1:27017 -d bjss -u first -p file // 将备份的数据导入数据库
$ 修改nodejs中mongodb代码的连接方式："mongodb://" + options.db_user + ":" + options.db_pwd + "@" + options.db_host + ":" + options.db_port + "/" + options.db_name;

6.在ecosystem.json中加入： "post-deploy": "cnpm install --registry=https://registry.npm.taobao.org && grunt build && pm2 startOrRestart ecosystem.json --env production" // 服务器就会自动安装，编译压缩样式，重启pm2一条龙了

7.当要在一个服务器上部署多个服务时，nginx的80端口要做多个服务的代理，域名解析中通过添加记录可以设置多个域名，但是www.iucen123.top这种域名只能有一个，可以用做一个服务，当要多个服务器时就只能采用二级域名了，nginx的配置下/etc/nginx/conf.d就要多添加几个需要代理的服务文件：如：jeff-com-3000.conf，jeff-com-3001.conf

8.防火墙iptables一般是用于限制某个端口的

9.pm2 logs // 查看pm2所有运行的日志, 也通过pm2 list查看每个服务重启的次数，以及cpu占用，很多的话就说明这个服务启动有问题

第十一节课
1.  Google从2017年开始将http协议都会标记为不安全的网站，苹果也在2017年开始必须支持https
2. 微信小程序的域名必须是https的
3. 强制自己的网站使用https，防止被劫持后注入广告
4. DV证书（有些免费，只需要验证域名）OV（审核严格，需验证企业信息）EV（全球统一的，最高等级，浏览器的地址栏显示绿色，支付，金融）
5. 免费的ssl证书，又拍云（https://www.upyun.com），腾讯云(推荐使用，里面有免费的ssl证书一年)，七牛云
注：https://console.cloud.tencent.com/ssl 这个是腾讯云ssl的地址
6. 在腾讯云里面ssl证书管理申请免费证书，通用名称为你自己在阿里云上购买的域名，然后将生成的主机记录和记录值拷贝到DNSPod域名解析的记录列表里面就可以对这个ssl生成的主机记录和记录值进行解析了，这个时候会受到审核通过的信息，下载ssl证书，打开；
(Nginx的https的配置可以直接进入腾讯云的ssl使用详情里面copy代码到/etv/nginx/conf.d//etc/nginx/conf.d/jeff-com-3000-free.conf里面)，如果不做https的转发，查看/etc/nginx/conf.d/jeff_com_3001.conf即可
7. 包含有Apache，IIS， Nginx，Tomcat证书
8.浏览器默认端口是80端口，所以使用https时，直接输入域名会被默认加上80端口在后面, 在nginx里面也就使用监听80端口了
9.服务器的安全组默认是外部地址访问服务器（进）做了限制，服务器访问外部地址（出）默认不做限制，而且安全组里面需要设置可以访问服务器的ip和端口（-1/-1就是服务器的所有端口支持这个ip地址访问）
10.服务器的防火墙也可以做ip和端口限制的，一般只用于限制端口的进和出；
11.nginx域名的原理是通过域名解析服务器得到服务器IP，找到服务器后通过域名进到nginx的过滤器里面，转发到本机的127.0.0.1:3001下
12.iptables防火墙里面要设置这个端口的进出规则
13.一个ssl证书只能接受一个域名，这个域名可以是顶级域名，也可以是二级域名
14.也可以在阿里云里面申请ssl证书，也有免费一年的；
15.可以在阿里云里面学习云服务器ECS的文档；


 








