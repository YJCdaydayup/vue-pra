一.代码层面的优化
1.v-if和v-show, v-if会确保切换过程中条件块内部的事件监听和子组件的销毁重建，为false时，什么也不会做，v-show是不管怎样，元素都会被渲染，只是基于display属性的切换，只需要显示一次就用v-if，需要频繁切换就用v-show；

2.computed具有缓存功能，下一次取值不会重新计算，watch类似数据的监听回调，当数据变化后只是获取数据值时用computed，当数据变化后要做其他操作就用watch；

3.v-for遍历时添加key，方便Vue内部机制精确找到该条列表数据，当state变化时，新旧状态值对比，较快定位到diff
  避免v-if同时使用，v-for比v-if的优先级高，每次都会遍历整个数组，应结合computed属性使用；

4.长列表性能优化，Vue是通过Object.defineProperty对数据进行劫持来实时响应数据变化，有些时候我们只是纯粹的展示数据，且数据不会有任何变化，可以去掉劫持，减少初始化的时间，通过Object.freeze来冻结对象；

5.事件的销毁，Vue组件销毁时，会自动清理与其他实例的连接，解绑它的全部指令和事件监听器，但仅限于组件本身，如果存在addEventListener等方式的监听是不会自动销毁，需要在销毁的时候beforeDistory(){}手动移除，以免造成内存泄露；

6.图片采用才加载，不再视图区域的图片先不做加载，滚动到可视区域才加载，vue-lazyload插件

7.路由懒加载，单页面应用可能有很多页面路由，webpack打包后的文件很大，导致首页加载资源过多，出现白屏问题，可以吧每个路由对应的组件分割成不同的代码块，路由被访问时才加载；

8.第三方插件通过babel-plugin-component进行按需引入；

9.服务端渲染SSR，优点是SPA页面内容是通过ajax请求获取到的，而搜索引擎爬虫工具不会等待ajax异步完成后在抓取页面内容，而SSR直由服务器渲染好后让前端展示，缺点，生命周期只支持beforeCreated和created两个钩子函数，必须处于nodejs的运行环境；

二.webpack层面优化
1.对于较大图片采用image-webpack-loader进行压缩优化；

2.ES6转ES5时，babel可能会注入一些辅助函数，如果多个源代码文件都依赖这些辅助文件，会导致这些辅助函数出现多次造成代码的冗余，可以安装babel-plugin-transform-runtime让他们只出现一次；

3.提取公共代码 commonpuginchunk

4.提取css文件

三.Web基础优化
1.gzip cdn 缓存
2.使用chrome performance 查找性能瓶颈