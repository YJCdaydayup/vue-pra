1.快速排序三部曲:先随机找到数组中的一个数作为基准点，在建立两个数组，分别存储这个数左边和右边的数，然后利用递归进行比较；时间复杂度(n2/4)

2.栈区有编译器自动分配和释放，存储函数的参数值和局部变量的值，堆区一般有程序员自己分配和释放，诺程序员不释放，程序结束时可能有OS回收，堆数据结构是一个树结构如堆排序，栈数据结构是先进后出的数据结构(比如控制器的跳转，函数的执行)；

3.栈的插入和删除都是在一端进行的，而队列是在两端进行的，队列数据结构是先进先出的(比如，排队买票)；

4.强制缓存：前端优化中可以使用expried或者cache-control来进行强制缓存，由于expired设置的是绝对时间，当浏览器修改本地时间时会造成缓存失效或者误差，所以http1.1之后使用cache-control的相对时间，这段时间内客户端不向服务器发送请求，返回的状态码是304告诉服务器使用缓存；

5.对比缓存，当强制缓存超出时间后，就需要使用对比缓存，由服务器决定缓存是否失效，可以与强制缓存一起使用，对比缓存有last-modified和ETag实体标签

6.避免iframe图片等标签使用空的src；避免使用行内样式；

7.js中垃圾回收的方法是标记清除和引用计数，标记清除是给内存中的所有变量进行标记然后去掉全局变量和闭包里面的变量，剩余的就会清除掉；

8.new的原理:let obj = {};
obj.__proto__ = Dog.prototype;
Dog.call(obj); // 继承Dog自身属性和方法

9.规范: 
  不要同一行声明多个变量
  使用=== ！==
  使用对象字面量
  switch 带default
  函数不要有时候有return有时候没有return
  for if带括号
  forin带var

10.字面量对象中的箭头函数属性的this为{}，test: function() {} 和test() {}一样

11.前端SEO，title， description，keywords权重逐渐降低，采用语义化的html代码让搜索引擎更易理解，重要内容放在前面(搜索引擎抓取HTML从上而下的，有的对长度有限制)，重要的内容不用js输出(爬虫不会执行js)，少用iframe(搜索引擎不会抓取iframe的内容)，提供网站速度；

12.img的title是鼠标放上去显示的，alt是图片的描述，一般加载不出来就会显示；

13.OPTIONS方法可用于跨域时浏览器进行预检，一般用于获取URL支持的方法，如get，post

14.浏览器通过url加载资源时，会先查看是否有强制缓存，expired和catch-control，没有就进性DNS域名解析，找到真实的IP(浏览器缓存，本机缓存，hosts文件，路由器缓存)，再通过IP向服务器发起请求建立三次握手，服务器检查HTTP头部是否存在缓存验证信息，如果数据新鲜就返回304，不新鲜就查询数据库将数据通过TCP发送浏览器，浏览器接收到响应后，根据情况关闭TCP连接或者保留重用，关闭四次挥手，浏览器就检查状态码，资源可缓存就缓存,如果需要gzip解析就解析，能显示的就显示，不能显示的就下载下来

15.浏览器的内核分为渲染引擎和js引擎，渲染引擎负责获取网页内容和现实方式，输出之显示器或者打印机，js引擎实现动态效果；

16.iframe会阻塞主页面的onload事件，搜索引擎无法解读iframe的内容不利于SEO，和主页面共享连接池，浏览器对相同域名的连接有限制所以会影响主页面加载，最好通过js动态给iframe设置src值；

17.页面加载时link同时加载，而@import引用的css要等到页面被加载完后才加载，link时xhtml标签无兼容问题；

18.doctype是放在html标签里面的，告诉浏览器用什么文档类型规范解析文档；严格模式是以该浏览器支持的最高标准来运行；混杂模式相对宽松和向下兼容，DOCTYPE不存在或格式不正确会以混杂模式加载；

19.HTML全局属性：class data-* dragable id lang元素内容的语言 style title

20.svg绘制的是独立的DOM节点可以绑定事件和修改，矢量的，canvas是画布会失真；

21.localhost和127.0.0.1是不需要联网的，localhost是域名，127，0，0，1是对应的ip，本机的IP就是本地对外开放访问的IP地址

22.基本数据类型中，当全局变量通过参数传递或者用新的变量持有都只是复制一个值给它，然后原变量和它没有任何关系；函数里面可以访问全局变量，并改变其值；

23.var p = new Person()，栈中保持p(保存的是堆对象person的地址)， 而new Person()则存在堆中；

24.当函数传递对象类型时，默认在函数里面就产生了一个新的同名引用指向这个对象，所有的操作都是通过新的引用来做的，如果此时person = new Person()，那么新的引用指向了新的地址但是原来传递进来的引用是没有变的；

25.像素比=物理像素／css像素，其中css像素就是pc下的像素大小，物理像素是移动端下的像素，可以通过window.devicePixelRatio获取像素比；

26.垂直居中办法，弹性布局flex，绝对定位+transform，position:absolute+left:0,right:0,top:0,bottom:0,margin:auto（这种的前提是子div必须有自己显式的定义宽高）

27.实现三角形可以通过设置border来做，但是必须写出自己的width:0，height：0才行；

28.rem的原理是相对html标签的fontSize的大小，实现方式是，保证设计稿的相对屏幕的比例一致，所以，fs =   function setRem(pwidth, rate) {
    var htmlNode = document.querySelector('html');
    var oWidth = document.documentElement.clientWidth;
    htmlNode.style.fontSize = 100 * oWidth / pwidth + 'px';
  }
  setRem(375, 100);
  document.getElementById('box').style.width = 2 + 'rem';

29.变量提升和函数提升，前面的提升依然排在前面，当变量名和函数名重名时，这个变量就时这个函数了，点语法优先(当点前面有括号时(),优先执行()前面的代码)

30.函数节流：一个函数执行一次后，只有大于设定的执行周期才会执行第二次，比如频繁触发的函数(处于优化性能的角度，在规定时间内，函数只触发一次)

31.防抖函数，一个需要频繁触发的函数，在规定时间内只让最后一次生效，前面不生效,（防止按钮在一定时间内被重复点击），原理每次点击就将上一次的timer去掉，只有最有一次的timer才有效；

32.nodejs的事件轮询机制，是通过libuv来实现的，分六个阶段：
  1.timers 定时器阶段 执行记时器到点的回调函数
  2.pending callback 某些系统操作 如tcp错误类型的回调函数
  3.idle prepare 为后面做准备工作
  4.poll 轮询阶段(轮询队列)
   如果轮询队列不为空，依次同步取出轮询队列的第一个回调函数进行执行，直到轮询队列为空或达到系统最大限制（负载高崩溃了）
   如果轮询队列为空，如果之前设置过setImemediate函数，会直接进入下一个check阶段，如果没有设置过setImediate函数，就在当前poll阶段等待，直到轮询队列添加回调函数后去第一个情况那样执行，如果设置定时器到点了也会去下一个阶段；
  5.check 查阶段
    执行setImmediate设置的所有回调函数
  6.close callbacks 关闭阶段，
    Close事件回调函数，做完后就会回到第一个阶段看看有没有计时器函数要执行；
  所以setTimeout(function(){},0) setImmediate()执行 process。nextTick()能在任意阶段优先执行；

33.一个url地址到最后的渲染完成，流程
  1.DNS解析，将域名地址解析成IP地址，浏览器DNS缓存 系统DNS缓存 路由器DNS缓存 网络运营商DNS缓存 递归搜索：blog.baidu.com(先从.com域名下查找DNS解析，再从.baidu域名下查找，再从blog域名下查找DNS解析，最后找不到就报错)
  2.TCP连接，TCP三次握手
    第一次握手 浏览器发起 告诉服务器我要发送请求了
    第二次握手 服务器发起 告诉浏览器我准备接受了
    第三次握手 浏览器发起 告诉服务器我马上就发了 准备接受吧
  3.发送请求 请求报文 HTTP协议
  4.接收／响应
  5.渲染页面
    遇见html标记，浏览器调用html解析器解析成Token并构建成dom树；
    遇见style或link标记，调用css解析器，处理成cssom树；
    遇见script标记，调用js解析器处理script代码（绑定事件 修改dom树或cssom树）
    将dom树和cssom树合并成一个渲染树
    根据渲染树计算布局
    将各个节点的颜色渲染到屏幕上
    以上不一定按顺序执行，如果dom树或cssom树修改了，可能会执行多次布局渲染
  6.断开连接 四次挥手
    第一次挥手 浏览器发起 告诉服务器请求报文发送完准备关闭吧
    第二次挥手 服务器发起 告诉浏览器请求报文接受完了，准备关闭了，你也准备吧
    第三次挥手 服务器发起 告诉浏览器响应报文发送完了，准备关闭吧
    第四次挥手 浏览器发起 告诉服务器响应报文接受完了，你准备关闭吧
    服务器先关，浏览器再关闭
 
34.闭包里面的维护的变量类似全局变量，生命周期被延长了，缺点是容易造成内存泄漏，使用时合理使用，用完后即时清除；

35.传递参数到函数里面，当函数里面没有声明变量来接收时，相当于在函数里面定义了var m = m，var o = o；如果是闭包这样传进来就会生产两个需要维护的变量了；

36.js中的字符串还是使用单引号

37.变量提升和函数提升这种预处理需要执行上下文对象，execute context，代码执行环境
   时机：代码正式执行之前会进入到执行环境；
   工作：1.创建变量对象，收集变量函数及函数的形式参数 叫做变量提升，全局变量对象window 局部变量对象，抽象但是存在
        2.确认this的指向
           全局this—》window
           局部this-》调用其的对象
        3.创建作用域链

38.js事件轮询机制，js是单线程，叫它主线程，异步任务有回调函数，底层开启子线程去处理，处理完成后就放到轮询队列里面等待回调到主线程，这种机制和nodejs是一样的；

39.宏任务 setTimeout setInterval requestAnimationFrame，都属于异步任务,异步的宏任务队列也是要等到点后加进队列来才会有
   定义：宏任务所处的队列就是宏任务队列
        第一个宏任务队列中只有一个任务，就是执行主线程的js代码
        宏任务队列可以有多个 
        当一个宏任务队列执行完后，就会看那个唯一的微任务队列有没有微任务，有就执行，没有就继续看有没有宏任务需要执行；
   微任务 new Promise().then(这里的回调属于微任务) process.nextTick
   定义：微任务所处的队列就是微任务队列
        只有一个微任务队列（异步回调函数的队列，这里就是轮询机制了）
        在上一个宏任务队列执行完毕后如果有微任务队列就会执行微任务队列中的所有任务，执行完毕后再看有没有宏任务需要执行

40.小程序比较类似Vue，是组件化开发，有系统自身定义好的组件，data数据双向绑定；

41.小程序对应的框架是美团推出的mapVue可以用vue的开发方式来开发小程序，腾讯推出的是wepy

42.Vue和React相同点都是组件化开发和虚拟dom，都支持props进行父子组件通信，都是数据驱动，都支持服务器渲染，都支持native的方案，React的RN，Vue的Weex；
   不同点：Vue是双向绑定，React是单向的，React推荐JSX，Vue是template定义组件在通过webpack和vue-loader进行解析；React改变状态必须通过setState，Vue里面只用this.属性来改变即可；
    虚拟DOM不一样，Vue会跟踪每个组件的依赖关系，不需要重新渲染整个组件树，而React中一旦状态改变，会渲染所有的组件，可以通过 shouldComponentUpdate来控制组件是否渲染；
    React严格上只正对MVC的view层，Vue是MVVM模式

43.Redux是独立的专门用于做状态管理的js库，不是react插件可以与vue，angular和react连用，组件共享状态；
   原理：store reducers() （action creator）getState

44.Vue组件通信，父子通信 子父通信 隔代父孙通信 兄弟同心
   1.props，可以传递一般属性（父向子通信），可以传递函数属性（子向父通信）
   2.Vue自定义事件 $emit(子组件向父组件通信) 只适合父子通信(子组件$emit后，父组件可以在created方法里面用event.$on来监听（这种就不局限于点击事件了），也可以用@myclick在制定元素上监听)
   3.消息订阅发布 pubsub-js这个库来实现，订阅Pubsub.subscribe(‘msg’,(msg,data)=>{}) Pubsub.publish(‘msg’,data) 任意组件通信
   4.vuex 更集中和方便
   5.slot 研究一下

45.函数调用传递参数不管是基本类型还是对象类型，如果没有申明变量指向形参，就默认有个同名的局部变量指向形参，当是闭包时，这个局部变量就是闭包维护的不会释放的变量了；

46.new new Func().getName(); 这里点语法优先，但是括号最大，顺序是 () -> . -> new，new后面有点语法会优先执行点语法,但有个前提，当遇到new Fun().getName()中的new 和 ()这个组合时就默认属于构造方法优先执行，只有这个会优先；

47.在window中可以显示的通过window调用全局方法，但是在node中不能用global显式的调用全局方法，会报找不到这个方法；

48.Vue属于MVVM的架构模式，原理是：
   1.创建一个Observer来劫持监视data中所有层次的属性；
   2.编译模版的时候为data里面的每个属性创建watcher，并将watcher添加到对应的dep中；
   3.当一个属性发生变化时，会通知对应的dep里面的某个watcher，watcher就调用对应的回调函数来更新界面；

49.require和import的区别
   1.require是赋值过程运行时才异步执行的
   2.import是解构过程，编译时执行的，必须写在文件的顶部
   3.require性能稍低，因为require运行时引入并赋值，而import在编译时只需依据import中的接口编译指定模块

50.Vue中数组本身的赋值可以通过Object.defineProperty进行监听，但是对于数组的push pop shift unshift splice sort等方法是无法直接通过defineProperty进行监听的，为不影响数组的原型，创建了一份基于数组原型的对象，之后在观察数据时进行挂载，浏览器支持__proto__就直接挂载到被监听数组__proto__上，不支持就将新的原型对象中的方法拷贝到数组实例中去，但是通过下标修改数组时无法进行监听的；

51.WebSocket网页端全双工数据通信
1）需要两个socket套接字，一个客户端socket，一个服务端socket；
2）七层协议：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层，前3层处理数据通信，后3层偏向数据处理，中间的传输层连上上下三层的桥梁
3）tcp/ip是传输层协议，通过socket来实现的
4）http协议是应用层协议，定义了数据包装格式，请求头请求体响应头响应体的形式进行数据传输






 