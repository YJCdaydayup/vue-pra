第一节课
1.正常一般转Promise可以用return new Promise((resolve, reject)=>{})
2.对于项目中已经使用了callback回调的，可以使用util库的promisify进行迁移，转成promise，如：
   util.promisify(fs.readFile)(‘./package.json’).then().catch()
注意：callback不管是错误回调还是正确回调都只会走到then里面，then会判断callback第一个参数，有值直接回调，为空就取第二个参数，如果第二个参数也为空，直接then()返回的是空
3.转promise后就可以配合async／await使用了

第二节课
1.迭代器原理是返回一个对象，对象里面包含一个next()方法，方法返回数组的值，以及让index++
2.生成器就是简化了我们自己去创建迭代器，多了 * 和yield关键字
3.tj是nodejs高产的大神，之前是做视觉设计的，在github上搜索tj看看
4.箭头函数和父作用域共享上下文，即就是最近的function共享this
5.const fs = require(‘fs’)运行时加载，import from就是编译时加载，如果不支持就需要用node-babel编译库
 $ cnpm i -D babel-cli babel-preset-env babel-node
 $ 增加.babelrc {presets: [[“env”,{“targets”: {“node”: current}}]]} // 就是使用当前的node环境
 $ cnpm i -D nodemon
 $ “dev”: “nodemon -w src —-exec \” babel-node src(默认寻找src下的index.js文件，可以省略) —-presets env\”” // 
 $ “build”: “babel src -s -D -d dist —-presets env” // 这里会编译src里面全部的js文件
 $ “rebuild”: “rimraf dist && babel src -s -D -d dist —-presets env” //rimraf 就是删除这个文件夹
 $ “production”: “node dist” // babel-plugin-transform-runtime babel-runtime —-registry=https://registry.npm.taobao.org，.babelrc增加 plugins: [[“transform-runtime”: {“polyfill”: false, “regenerator”: true}]]
// 注：cnpm run prodcution 执行的必须就是编译build之后的代码，以启动压缩后代码作为生产环境

第三节课
1.koa主打 中间件，执行上下文，主要有 Application Context Request Response Middlewares session cookie
2.查看koa的application.js的源码
3.context.js文件通读：最重要的是delegate(proto, ‘response’).method(‘redirect’).method(‘set’).method(‘status’).method(‘body’)等，以及delegate(photo, ‘request’)就是用response/request上面的方法挂载到proto上面，这个proto就是一个context.js中导出的context对象
4.request.js文件通读：里面返回一个对象module.exports = {get header {return this.req.header}}
5.在拿到context后，可以进行 ctx.type = ‘text/html; charset=utf-8’, ctx.body = ‘返回的信息’
6.理解在字面量对象里面定义属性通过get和set进行操作：
let obj = {
   get socket() {
     return this.mySocket
   },
   set socket(val) {
     this.mySocket = val
   }
}
这里get和set方法名可以任意取（最好一样），需要保证处理的属性是同一个mgSocket，这样通过obj拿到mySocket的值就是通过obj.socket，而且这里的this.mySocket无需先在属性里面定义，这样写的好处是第一可以计算一下再返回，第二是将一个属性重命名了来获取
7.koa中，只要被app.use的都是中间件，一切皆是中间件；
8.koa中，数据在中间件之间流动需要使用next, 结合异步的处理，写成 wait next（)
9.koa中，ctx.body就是设定返回内容，只要能流动到中间件设置了ctx.body就会拼接body在后面，当所有的中间件走完了，这个时候开始将body中的数据返回出去；
10.中间件的数据流动逻辑：查看app.js里面，use好各个中间件mid1 mid2 mid3后，顺序执行时遇到next()就将控制权交给下一个中间件，执行到最后一个后，就开始往回交控制权；
1）谁给我控制权我就把控制权还给谁，我会找到他给的位置以便他能继续从这个位置往下走
2）到达最后一个中间件后，不管有没有next()都会执行完最后中间件里面所有的代码后，将控制权交给曾给我控制权的那个中间件（找到它的位置再给控制权），上一个中间件执行后面的代码后自动交还控制权给上上个，反正控制权一定会交回去
11.koa-logger通过交出控制权等到其他中间件走完了再回来从而计算并打印相应的时间和body出去的数据大小，logger要放在中间件的第一个进行use
12.纯函数，不会对全局变量造成任何影响
13.之前用迭代数组的方式如下：
(function tailing(k) {
    if (k > 3) {
        return false
    }
    console.log('xiugaiqian1 ', k)
    tailing( k + 1)
    console.log('xiugaihou1 ', k)

})(0)
// koa-compose中间件将中间件组合在一起就是利用这一原理通过迭代的方式从middleware中间件数组取出中间件去一一执行的，每个中间件执行完毕，就会在中间件的next（）方法里面调用dispatch(i + 1)来执行下一个中间件，所以一个中间件是一个函数，里面不执行next就不会从数组里面取出下一个中间件来执行，在return dispatch(i + 1)前面加了return就意味着要等下一个中间件返回了再去执行这个中间件next后面的代码
核心源码：
function compose(middleware) {
    return function (context, next) {
        let index = -1
        return dispatch(0)
        function dispatch(i) {
            index = i
            let fn = middleware[i]
            if (i === middleware.length) return false
            return Promise.resolve(fn(context, function next() {
                return dispatch( i + 1) // 由于是异步同步处理，这里要return完了才会出来
            }))

        }
    }
}
// 每一次next就会执行下一个中间件，当最后一个中间件return了就会执行倒数第二个next后面的代码，因为整个采用的就是await同步处理异步的方式，从这里可以看出，最后一个中间件无论有没有next都会return从而回到上一个中间件
14.原始的路由使用就是通过path进行判断区别的，express框架中默认通过restful规范实现了路由，

第四节课
1.koa2和koa1的对比：
1) 语法：koa1使用的生成器generator和迭代器yeild(通过yeild next进入到下一个中间件)，koa2使用的是async／await以及箭头函数来（通过await next（）进入下一个中间件）
2）koa1依赖的库是co这个库，koa2依赖的是koa-compose这个库，以ES6语法为主
相同点：
3）都是洋葱模型，一层层穿过中间件到达业务的核心部分，然后一层层穿过中间件，穿过中间件时会检查cookie，对请求增加tag等操作
2.中间件一分为二，前面部分处理请求，后面部分处理响应，分界线就是next（）
3.安装全局的翻译模块：$ cnpm i -g fanyi,可以在命令行对中文或者英文进行翻译，朗读
4.koa1到koa2的升级的话，可以先升级koa库的版本，配套的三方库如果不兼容koa2，需要使用koa-convert进转化
5.最新的koa-logger是已经对koa2进行了兼容
6.定义函数为DOM里面的文件增加空格：let tab = (n) => new Array(n).join('&nbsp;')
7.koa2中一切都是中间件，不使用插件的话，响应数据也是在use的中间件里面的，后面可以通过koa-router来实现restful请求路由
8.koa2里面通过配置好ctx.body后，框架里面会通过原生的res.end(body)出去，所以返回出去就只考虑配置好ctx里面的body；
9.koa和express对比
1）服务能力差别不大，不绑定任何中间件，非常干净的裸框架，需要什么加什么。express大而全
2）采用的是大量的callback回调来处理业务逻辑的，koa2是采用async／await同步的方式处理异步的
3）koa中间件是洋葱模型，数据先流进去再流出，一般分上游和下游，上游用于处理请求，下游用于处理响应，而express的中间件默认是只流进不流出的（单向的，通过事件机智才能实现双向流动）

第五节课
1.进入github搜huanglong，可以学习他的很多源代码
2.创建码云私有仓库：git@gitee.com:yang_li123/douban-trailer.git
3.安装最新的koa就使用cnpm i -D koa@latest
4.有的云服务器部署了CDN服务，可以通过提供的CDN地址来加载bootstrap依赖文件，比如https://www.bootcdn.cn里面，在里面可以搜需要的CDN库
5.git合作开发办法：我在主分支master上开发后，先 git checkout master -b daily-5-2, 产生新分支并切换到这个分支，然后推到git仓库，再进入git仓库里面pull request，选择两个分支，选择审查人员再提交，审查人员进来后审查完毕就merge合并即可, 也可以直接切换到master后merge一下：git merge orgin/daily-5-4，然后推到服务端
6.通过ejs框架本身的ejs.render(导出的ejs模版字符串，{name: ‘Sara’})，可以将数据与导出的字符串做绑定赋值生成字符串后返回给前端做展示
7.使用koa-views中间件，实现ctx.render(‘index’,{name: ‘Sara’})，支持pug，ejs等模版引擎, use方法是一样的，只是extention不一样
8. 研究一下DPlayer这个h5视频播放器

第六节课
1.puppeteer是无请求头浏览器，模拟真实用户的网页访问，注入脚本执行一些js代码再解析网页上的文本，提取目标数据；
2.正常使用async／await就结合await方法返回一个promise对象，resolve时才会执行后面的代码，如果判断后面不是promise对象或者常数或者同步函数就立即返回undefined，是常数会包裹成promise对象将常数放在resolve（常数）里面;
注：await 后面可以是 promise 常数 同步函数（是异步函数的话拿到的就是undfined）
3.如果要将异步函数的数据先返回到调用这个函数的地方，在调用的地方重新处理，就传递一个callback进去，callback return后再调用resolve函数
function test(callback) {
    return new Promise((resole, reject)=> {
        setTimeout(function () {
            let x = 'A' + 'B' + 'C'
            resole(callback(x))
        }, 2000)
    })
}
;(async ()=>{

    let x = await test((data)=> {
        return '123456' + data + y
    })
    console.log(x)
})()
4.通过puppeteer进行网站数据爬取和对爬取的h5数据进行解析；
5.由于node是单线程的，对于在主线程上的cpu密集性任务会造成主线程阻塞，这时可以使用子进程模块child_process派生子进程来执行新的任务，可以监听err exit message事件，子进程任务执行完毕后就通过process.send(data)发送回来；
6.整理 同步／异步，异步IO，阻塞／非阻塞 子进程 子进程通信
7.后端编写接口文档可以参照豆瓣提供的接口那种模块格式：https://douban-api-docs.zce.me/movie.html
8.使用request-promise-native来进行后端的网络请求，得到数据是从promise获取的
9.同步，都是在主线程上运行，前者未执行完不会执行后者
10.异步，被动等待进度，通过轮询或者执行完毕后，通过回调来告知
11.执行过程中获取状态之前是什么都不能做就是阻塞， 反之就是非阻塞
12.异步非阻塞，通过回调的方式实现异步，等待的过程中继续可以监听事件就是非阻塞，nodejs的一大卖点
13.豆瓣代码地址: git@gitee.com:yang_li123/douban-trailer.git 
14.对于cpu密集型任务可以采用子进程child_process的方式，也可以使用Cluster集群或者开启几个node服务然后通过nginx进行负载均衡处理来用到cpu的多核；
15.通过qiniu这个库上传资源到七牛存储空间；（可以通过nanoid库实现随机数）

第七节课
1.前端js层面就理解分宏任务和微任务，node端js层面就理解event-loop机制
2.libuv就是向nodejs提供一套异步非阻塞的代码+事件循环机制
3.总结前端宏任务 + 微任务
4.nodejs的事件循环机制：
1）底层uv_run跑起来后就会依次运行，uv-update-time uv-run-timers uv-run-pending uv-run-idle uv-run-prepare uv-io-poll uv-run-check uv-run-closing-handles八个函数组成了nodejs事件循环的完整的整个过程,总共分为六个阶段
2）异步的操作就是叫个libuv来做的
3）timers定时器（对应函数是uv-run-timers）setTimeout setTimeInterval -> I/O callbacks（对应函数uv-run-pending）（执行系统的错误，比如Socket错误，TCP／UDP） ->idle/prepare（uv-run-idle uv-run-prepare做一些准备的工作） -> 
Poll（轮询阶段，非常重要uv-io-poll函数）,如果轮询队列不为空，依次取出轮询队列的第一个回调函数进行执行，直到轮询队列为空或达到最大值（负载高崩溃），如果轮询队列为空，如果之前设置了setImmediate函数就会跳到下一个阶段，如果没有immediate函数就在poll当前阶段等待有新的回调函数添加到轮询队列，执行完毕后如果有计时器任务到期就回到第一阶段
 -> check（函数uv-run-check会执行immediate函数的回调） -> close callbacks（uv-run-closing-handles函数）
4）process.nextTick优先执行，包括Promise.resolve().then()回调仅次于process.nextTick
5.具体eventloop执行判断依据办法：
1）.启动执行js时，同一种回调有多个的话会随机取其中一进行调用
2）.根据event-loop事件循环将各个任务划分循环轮数，从上而下执行，不能先执行回调的就放在下一轮的列表中
3）.setTimeout有延时时间则放在最后一轮
4）.有异步任务因为不能立刻回来所以本轮的setImmediate优先执行了的放在第二轮是不会执行的
5)process.nextTick和Promise.resolve().then()，是在每个阶段切换的时候调用的

第八节课
1.mongoose处理可以先在入口文件初始化连接数据库，然后在需要的地方require对应的表对象如Student，然后进行操作，也可以直接用一个文件写好数据库的连接，然后通过promise放回出去，在wait connect()的后面一个个注册所有的schema，在需要的地方直接const Student = mongoose.model(‘Student’)即可使用了,此时唤起Student这个表就不需要传schema了；
2.shema的中间件处理：studentSchema.pre(‘save’,function(next){}),每次save前作的处理
3.schem中的数据类型可以是Date类型：{type: Date, default: Date.now()}
4.将mongoose的promise指向全局ES6的primose：mongoose.Promise = global.Promise，后面的以对象／类操作数据库返回的就是promise，可以用await了
5.mongoose中定义schema时，有unique:true,required:true这些属性，当时数组时可以：category:[{type: ObjectId,ref: ‘Movie（会存哪个表的_id）’}],也可以单独:[String]表示放string类型，const ObjectId = mongoose.Schema.Types.ObjectId，得到ObjectId类型


第九节课:通过装饰器对路由进行拆分和分层，支持路由命名空间
1.koa-router的使用，首先引入koa-router，初始化const router = new Router(),router.get(‘/movies/all’, async (ctx, next) => {ctx.body = {}})，一定要module.exports=router进行导出,在入口文件引入后，使用app.use(router.route()).use(router.allowedMethods())这是固定写法
2.koa一切皆中间件，app.use()自定义中间件时，处理符合自己逻辑的事件，不符合就必须在后面加await next()，这样才会走到最后的路由中间件；
3.可以为某个单独的路由增加中间件：
router.get('/movie/:id', (添加这个路由的中间件 =>)async (ctx, next)=>{
    ctx.params.id = '5e6df9eb9088faf04fe9f41c'
    return next()
},async (ctx, next) => {
    const Movie = mongoose.model('Movie')
    let theMovie = await Movie.findOne({_id: ctx.params.id})
    ctx.body = {
        theMovie
    }
})
4.添加路由前缀：let router = new Router({
    prefix: '/movies'
})
5.还可以使用中间件后再添加路由：router.use(mid1()).use(mid2()).get(‘/movies’, await (cox, next) => {})
6.Symbol没有构造函数，直接通过Symbol()得到，一旦创建不能被修改且每次产生的symbol是不一样的绝对不会重复，可以用于作为属性值，比如在nodejs中通过装饰器来抽象封装支持路由空间时可以将symbol挂到类的原型上来：
export controller = function (path) {
    return function (target) {
        target.prototype[symbolPrefix] = path)
    }
}
7.对象的健值对的健必须是一个字符串或者symbol，不能是对象，如果是对象就会转成“[Object object]”,如果要健可以是对象，就使用let map = new Map(),通过map.set({name: ‘sara’},{age: 18})，然后遍历for (let [k,v] of map) {}
8.装饰器语法@find(‘canshu’),@修饰的必须是一个函数，可以是一个返回函数的函数，这样的话@的时候就必须调用，另外，装饰器修饰的某个方法如不执行，这个装饰器函数也会默认的执行
9.处理完回调后，后面的代码不需要执行就用return，如 return ctx.body = {code: 1}
10.老师的总结文档地址：https://www.kancloud.cn/surahe/front-end-notebook/1110747
11.可以采用webpack对node项目进行编译打包，需要
1）target指向node：target：“node”，意思是在node环境中
2）增加node配置：可以使node环境的代码在其他环境中运行如浏览器中运行：
node: {
    console: true,
    global: true,
    process: true,
    Buffer: true,
    __filename: true,
    __dirname: true,
    setImmediate: true,
    path: true
},


第十节课
1.前端打包除了webpack外，还可以使用parcel进行，先安装parcel，然后在package.json里面配置打包命令： "build": "rm -rf dist && parcel build src/index.html --no-cache -d dist --public-url /“，多个命令就用&&隔开，它不同于webpack，webpack是从入口js文件出发的，而parcel使用index.html出发，编译里面的所有本地的js文件和css文件，其中比如sass文件可以直接写在index.html里面，parcel会自动进行编译解析，也可以通过import引入到js文件里面，parcel会将样式文件自动抽出来作为css文件；
2.parcel不需要配置文件，但是需要依赖比如postcss适配不同浏览器，要添加postcss.config.js，像sass文件的解析，就需要默认安装node-sass,如stylus就必须安装stylus stylus-loader，但是不需要像webpack那样在webpack.config.js里面配置规则；
3.nodemon默认参数可以不配置，其实就是把—-watch src放在了打包命令上面，也可以配置起来nodemon.json，在里面可以配置那些文件的变化不需要监听；
4.装饰器分三种：
1）修饰类的装饰器，参数target就是被修饰的类
2）修饰类成员的装饰器，参数target是类的实例对象
3）修饰类的方法的装饰器，参数target是类的实例对象
5.熟悉各种babel原理，如ES，presets，plugins等

第十一节课
1.Koa ctx request response middlewares
2.MongoDB 
3.Puppeteer 谷歌的无头浏览器 爬虫 迭代快
4.parcel 构建速度快
5.AntDesign react的组件框架
6.Nodejs 线程 进程 同步异步 事件循环


补充课1
1.path.resolve(‘./public’)是路径相对转绝对
2.服务器重定向是返回302临时重定向，301永久重定向，浏览器根据服务器返回的url打开另外一个地址
3.重写url，一切都在服务器内部进行的，从一个路由跑到另外一个路由上，起到复用的效果；
4.app.on(‘error’, (err, ctx)=>{在koa里面只是用于错误日志的收集处}) // 收集服务器可以用于监听服务器内部报错的处理
5.使用session后用户数据存在session里面，客户端cookie里面的字符串就是默认用用户数据进行base64编码后的字符串
6.session里面参数
1）httpOnly：true // 不允许客户端操作cookie，document.cookie
2）signed： true // 签名，会产生一个cookie字符串以及以这个字符串加密的字符串防止cookie被修改
7.定义中间件来处理服务器报错返回页面：写在最上面即可，原理：由于有async／await，整个都是同步事件，可以直接在第一个next（）进行try catch，抛错就用ctx.throw()即可
app.use(async (ctx, next)=>{
 try {
   await next()
 }catch(err) {
   ctx.body = `<div>错误页面</div>`
 }
})
8.websocket简单流程：
1）登录产生了一个随机数id->分配session->用户信息重定向list页面->把id传递给页面->页面吧id通过tcp送回来->创建socketId存储在:global.mySessionStore[id].socketId = ctx.socket.socket.id;
2）这个id下可以获取用户信息，也可以获取sessionId
9.任务：即时聊天，统计在线人数，显示在线列表，私聊，群组聊天




 