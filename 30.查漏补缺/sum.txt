1.document.write('<script src="http://thirdparty.com/b.js"><\/script>’)加载js文件时，会阻塞后面的js文件的加载，一般不用，但可以用于加载带参数的动态js文件或者需要加载很多个必须有顺序的js文件；
2.善于利用标签的自定义属性date-timer={time: 12345632,item:134123456}，可以通过eval将获取到的转化成对象进行利用；
3.封装功能可以使用字面量对象也可以使用构造函数，参考Ajax请求封装；
4.
3.学习老师对于Ajax请求的字面量对象的封装；
4.防止重复点击可以使用setTimeout或者使用一个bool值来控制；
5.前端优化办法：
1)减少http请求,合并css js 或者直接把js css写在首页
2)CDN，通过DNS判断用户地址就近访问资源；
3)添加expire头，或者cache-control缓存文件
4)Gzip压缩，文件先再服务器进行压缩
5)将css样式放在页面的上方，防止重复绘制
6）将js放在页面的最下面
7)避免使用css中的表达式
8）减少NDS查询，域名和IP一一对应的，但是浏览器不认识域名，解析一个域名需要20-120ms，建议一个网页最多2-4个域名；
9）压缩js css
10）避免重定向
11）移除重复的脚本，提高代码复用度
12）使用ajax缓存
13）ETag用法
14）延时加载
15）预先加载
16）避免空的src，href
17）减少DOM元素
18)避免404，浏览器会把找到的错误的js文件执行

6.CSS优化
1）将css放在页面的上方
2）避免使用css表达式
3）压缩css，还可以起到保护作用 yui compressor jsmin
4）避免使用滤镜 AlphaImageLoader
5）CSS无图片技术通过css来制作类图片

7.图片的优化
1）缩小图片的大小
2）png代替jpg，效果一样大小小一些
3）使用smush.it这个网站来压缩图片；
4）合并图片(多个小图)，css贴图定位
5）大的banner图片，将图片分成几个图片来下载提高下载速度
6）多域名下载图片(浏览器对同一个域名同时只能发送固定的请求数，ie6时2个，所以对图片资源开启对歌域名可以利用它的并发加速图片的下载，但要权衡域名的解析耗时)建议2-4个域名
7）提前下载好图片，比如页面跳转时预先加载下一个页面的大图

8.cookie的优化
8）大部分浏览器的一个cookie大小是4kb；
9）每个站点只能存储20个cookie
10）cookie在同一个主域名下是共享的，二级域名需要做设置，不然二级域名的请求头里面也会携带一级域名的cookie，会造成服务器的压力；
11）图片的请求可能也会携带cookie，这样最好使用单独的顶级域名来加载图片，避免cookie的传输和对已有cookie的影响，和导致增加cookie的体积；
12）设置cookie的过期时间
13）开发时确保静态资源的请求时无cookie的请求
14）减少cookie的体积
15）子域名默认可以得到顶级域名的cookie的

9.javascript的优化
1）for循环的优化，由于不会缓冲data.length,每次都会计算，可以这样写:
for(var i=0;m=data.length;i<m;i++){}
或者 for (var i=data.length;i—-;){}
2)最好不要再for循环中创建函数，创建函数开销大，策略模式中的表单校验采用的是for循环创建函数装进数组
3）内存缓存较小的，一般不会改变的运算到的值
function cal(params) {
  var key = JSON.stringlyfy(params);
  If (typeof cache[key] !== ‘undefined’) {
    Return cache[key]
  }
  cache[key] = result;
  return result;
}
4)将对象或者对象的属性手动置为null；
5）根对象不会被垃圾回收站回收，所有全局对象的全局属性也会一直存在
6）闭包容易导致内存泄漏
7）最好不要for循环中创建正则表达式，最好复用
8）保持数组元素类型一致
9）yslow pagespeed
10)css js Dom加载的顺序 https://www.cnblogs.com/janrodney/p/10768451.html

