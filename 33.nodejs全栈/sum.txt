一.补充
1.查看哪个进程占用了这个端口 $ lsof -i:4000,然后$ kill -9 pid 杀掉这个进程，系统的进程不要杀；
2.ctrl + C 关闭进程，ctrl + D是暂停了进程，但是这个进程依然存在；
3.将server端的代码拷到服务器，启动服务，外部就可以访问了；
4.pm2 start bin/www 启动服务，pm2 stop bin／www 关闭服务后 删掉其进程 pm2 delete bin/www 就可以了
5.重命名 mv www demo-server,其实就是移动改名
6.pm2 start all ／ pm2 stop all ／pm2 list 查看所有任务 ／ pm2 log 查看日志

二.koa2 koa1 express比较
1.在koa中，一切流程都是中间件，数据流向遵循洋葱模型，先进后出，类似栈的方式组织和执行的；
2.koa2和koa1最大区别是koa2实现异步是通过async／await，koa1是通过generaror／yield，而expres是通过回调来实现的；
3.koa2和express提供的api大致相同，express大而全比较重量级，内置大多数中间件，koa2不绑定任何中间件，比较轻量级，拓展性好；
4.express没有提供ctx上下文对象，都是要手动处理，本身也不支持洋葱模型和数据流出流入；
5.koa的数据流入流出遵循洋葱模型，先走到最后一个中间件然后从最后一个中间件走到第一个，最后next出去；

三.几种规范的理解
CommonJS规范主要用于node服务端，加载是同步的，不适合浏览器环境，会造成阻塞加载
AMD异步加载，requirejs的实现，依赖前置，性能较优
CMD异步加载，seajs的实现，就近依赖
ES6种使用export default实现模块功能，完全可以取代CommonJS，和AMD

四.node中event loop的六个阶段

五.node在服务端如何处理跨域问题
1.在app.use里面指定允许跨域访问的来源域，通配符*表示所有域都可以访问
ctx.set("Access-Control-Allow-Origin", "*");
2.当设置成允许跨域访问后，默认情况下Cookie是不包括在内的，可以通过设置Access-Control-Allow-Creditails为true，来允许携带Cookie，此时允许的域名不能是*，而要写成具体的域名名称
ctx.set("Access-Control-Allow-Credentials", true);
3.指定允许跨域访问的方法列表
ctx.set("Access-Control-Allow-Methods", "OPTIONS, GET, PUT, POST, DELETE");
4.指定允许进行跨域访问的请求头列表，一般用于预检请求上
 ctx.set("Access-Control-Allow-Headers", "x-requested-with, accept, origin, content-type");
5.告诉客户端数据返回的类型
ctx.set("Content-Type", "application/json;charset=utf-8");
5.如果不设置mode，默认跨域模式是cors，在跨域POST请求之前会先发一个OPTIONS请求来探路，如果服务器允许再进行POST请求，这种要在服务端判断一下：
if (ctx.request.method == "OPTIONS") {
      ctx.response.status = 200
   }
