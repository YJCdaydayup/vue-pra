知识点：https://www.jianshu.com/p/f40caed71685

一.runtime的内存模型
1）OC对象是由一个objc-object指针类型所指向的，这个objc-object是一个结构体，里面有个isa指针，指向这个对象的类对象Class，而这个class中存储的就是这个实例对象的属性列表，方法列表，成员变量列表
2）OC中的类用也是有一个objc-class指针类型，也是结构体，存储super-class（父类） name 类名称 version info ivars变量列表 methodLists方法列表 cache缓存 protocols实现的协议列表
3）类的super_class指向父类，类的isa指针指向的是元类对象，元类保存了类方法的列表，最终基类的元类是自己本身NSObject

二.initialize和load方法
1）load方法只会调用一次，类被加载的时候就调用，是采用函数的内存地址直接调用的方式，先调用父类的，在调用子类的，最后调用分类的
2）initialize只会调用一次，类或子类第一次收到消息时调用，父类先调用，子类再调用，如果实现了分类那么只会调用分类的，不会调用本类的；

三.weak实现原理以及sidetable结构
1）weak其实就是维护了一个hash表结构，key是对象地址，value是weak的指针数组，weak表示弱引用不会对对象引用计数+1，当引用对象被释放时，其值被自动设置为nil，解决循环引用
2）底层，runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址
3）objc_initWeak函数会调用objc_storeWeak函数，更新指针指向，创建对应的弱引用hash表
4）释放时，调用clearDeallocing函数，根据对象地址获取所有weak指针地址的数组，然后遍历这个数组将里面的数据设置为nil，最后把这个entry从weak表删除，最后清理对象的记录
5）sideTable结构：有三个成员，保证原子操作的自旋锁，引用计数hash表 weak引用的全局的hash表

四.对象管理如何进行内存管理的，如何实现weak属性
1）内存管理方面是通过在赋值的时候设置一个policy，根据这个policy的类型对设置的对象进行retain/copy等操作
2）当policy为OBJC_ASSOCIATION_ASSIGN的时候，设置的关联值将是以weak的方式进行内存管理的

五.Autoreleasepool所使用的数据结构是什么？AutoreleasePoolPage结构体；https://www.it610.com/article/1224831190939308032.htm
1）自动释放池是若干个AutoreleasePoolPage以双向链表的形式组合而成
2）单个节点是一个AutoreleasePoolPage，大小4kb，包括next thread parent child等
3）程序执行的过程中向一个对象发送autorelease消息，就会往AutoreleasePoolPage中添加自动释放对象autorealse对象，next作为游标指向最新add进来的autorelease对象，当单个AutoreleasePoolPage装满时，会创建一个新的AutoreleasePoolPage，通过child和parent进行链接，
4)当调用@autoreleasepool，就会调用objc_autoreleasePoolPush方法，会往AutoreleasePoolPage中添加一个哨兵对象，当{}里面的代码执行完毕，就会调用objc_autoreleasePoolPop将哨兵对象之后添加的所有autorelase对象清理掉
如下：
int main(int argc, char * argv[]) {
    /* @autoreleasepool */ {
        //创建自动释放池
        __AtAutoreleasePool __autoreleasepool = objc_autoreleasePoolPush();
        //TODO 执行各种操作，将对象加入自动释放池
        
        //释放自动释放池
        objc_autoreleasePoolPop(__autoreleasepool)
    }
}

六.方法交换黑魔法注意点
1）避免交换父类的方法
2）交换方法放在分类的load方法中进行
3）交换方法放到dispath_once中进行，防止手动调用load方法导致反复交互
4）交换的方法名叫前缀避免方法冲突

七.atomic原子行是否安全
1)atomic是系统自动在setter和getter方法进行加锁操作，保证读写安全，属于自旋锁，效率比较低
2）UI的操作都在主线程的，所以UI的属性要用noatimoc保证性能

八.通知的实现原理
1) 有三张表，named table传入通知名的表，nameless table没传入通知名的表 和wildcard既没有传通知名也没有传object对象的表，这个表是链表的数据结构；
2）在named table中以通知名作为key，表作为value，表中以object为key，observer观察者为value，当不传object时，默认会响应当前通知名下的所有观察者；
3）在nameless table中不存在通知名，会以object为key来响应对象的观察者；
4）既没有通知名也没有object，就会响应链表中的所有的观察者；

九.RunLoop
1)一个线程对应一个runloop，主线程的runloop默认是打开的，子线程的runloop是未创建的，所以子线程执行完毕后就会推出当前线程；
2）runloop分为两种，NSRunloop和CFRunloop，NSRunloop存在于Foundation框架基于CFRunloop的OC封装，CFRunloop存在于CoreFoundation框架线程安全的
3）CFRunloop是一个结构体，有自己的mode模式，每个模式下可以分配事件源source，timer，Observer
4）模式有默认模式主线程在这个模式下，屏幕追踪模式滑动屏幕时的模式，还有个占位模式，runloop只能在一个模式先运行，要进入另一个模式只能先退出当前模式
5)获取某个线程的runloop，会从全局的字段查找，找不到就会创建一个并以当前线程为key保存在全局字典中
6）常见应用：
A）控制线程的生命周期，线程保活，原理是如果线程里面没有任何事件源source0/1/timer/observer就会立刻退出，为了不让它退出可以添加一个source1让线程常驻内存；
B）tableview的延迟加载图片，[self.img performSelector:@selector(setImage:) withObject:image afterDelay:0 inModes:[NSDefaultRunLoopMode]];
C）解决NSTimer计时器默认在当前线程的默认模式中可以转到占位模式
D）通过对主线程的Runloop的监听来监测应用的卡顿，runloop在进入睡眠和唤醒后有两个状态，创建Observer监听主线程；

十）KVO原理
1）为需要观察的对象动态创建了一个子类，以NSKVONotifying_为前缀，并将需要观察的对象的isa指针指向这个新的子类，会重写class方法返回原来的类来尽量保证对原对象的修改，然后在新的子类中对需要观察的属性的getter/setter方法进行重写，调用willChangeValueForKey和didChangeValueForKey来记录新旧值，既而调用observeValueForKey的方法；
2）造成崩溃：没有移除观察者 重复移除观察者 移除未注册的观察者 观察者被提前释放（局部变量或者weak修饰） 未实现observe方法，添加观察者时keypath为空

十一）Block
1）分三种：栈上block（使用来栈上的变量） 堆上block（使用copy或strong就会从栈区拷贝到堆区） 和 全局block（未引用任何栈上的变量）
2）还有发生copy的时机：调用block的copy方法 block作为返回值 赋值给strong修饰的变量 调用GCD的block方法

十二）锁
1）互斥锁 @synchronized NSLock
2）递归锁 NSRecursiveLock，处理递归任务
3）信号量
4）条件锁 NSCondition
5）读写锁，其实就是将读和写分开，采用dispath_barrier_async来完成的
6）自旋锁


十三）几种计时器
1）NSTimer，要主要他可能造成内存泄漏，其二就是当runloop进行连续性运算的时候，timer可能会延迟发出造成延后执行；
2）CADisplayLink根据屏幕的刷新频率来的 1s60次
3）dispatch_source_t 一定要设置成成员变量不然会被释放，不受runloop的影响但是不是100%精准

十四）离屏渲染
1）GPU屏幕渲染方式：当前屏幕渲染和离屏渲染
2）当前屏幕渲染：GPU的渲染操作是在当前用于显示的屏幕缓冲区进行
3）离屏渲染：GPU的渲染操作是在当前用于显示的屏幕缓冲区之外开辟一个新的缓冲区进行渲染操作
4）通俗理解：老板叫我段时间完成一件事，但是我一个人做，时间短于是我叫一个朋友帮我做，其中的性能消耗就是我和朋友沟通的成本和请朋友花钱的成本；
5）造成的有：
光栅化：将图转化成一个个栅格组成的图像，这个栅格会被缓存起来，下次图片的layer没有发生改变就会减少渲染的屏幕，内容经常变动不适合
遮罩
阴影
不透明
圆角
渐变等
6）特殊的离屏渲染：通过CoreGraphics框架自定义绘制圆角，就是重写drawRect方法去绘制，涉及到CPU渲染，是由CPU在app内完成，渲染之后再交给GPU显示，这种对性能的影响不大，而且CoreGrapics是线程安全的，可以进行异步绘制，然后在主线程上更新

十五）图片解码
1）一般使用的JPEG/PNG这些图像数据是压缩后的位图，需要先将它解码转成位图才能渲染到屏幕上；
2）解码操作默认在主线程完成且比较耗时，通过CPU完成，SDWebImage就是将解码操作从主线程放到子线程中；
3）位图就是一个像素数组，每个元素就是图片中的点
4）PNG和JPEG都是压缩的位图图形格式，PNG是无损压缩，支持alpha通达，JPEG是有损压缩，可以指定压缩比
5）当未解压缩的图片将要渲染到屏幕时，系统会在主线程进行解压缩，而如果已经解压缩了就不会再对图片进行解压缩，业内方案是在子线程进行强制解压缩
6）强制解压缩原理是对图片进行重新绘制得到一张新的解压缩后的位图，核心函数：CGBitmapContextCreate
7）图片文件只在确认显示时CPU才会进行解压缩，解压缩耗性能，解压缩后会缓存起来
8）图片显示过程：
cpu：读取文件，计算frame 图片解码 解码后纹理图片位图数据通过数据总线交给GPU
Gpu：获取frame，顶点变换计算，光栅化，获取像素点的颜色值，渲染到帧缓冲区，渲染到屏幕

十六）启动优化
1）main函数执行前
加载可执行文件
加载动态链接库
Objc运行时初始化处理，类注册 分类注册 方法唯一性检查
初始化 执行load方法 创建c++静态全局变量
优化：减少动态库加载，对动态库进行合并，减少类，分类，方法的数量 用initialize方法结合dispatch_once替代load
2）main函数执行后，首屏加载完成
首屏基础库初始化
首屏相关业务数据获取
首屏渲染显示
优化：只启动必要的初始化任务，懒加载
3）首屏渲染完成后
主要优化主线程耗时方法，滞后执行或者异步执行，因为此阶段已经显示首页，主要优化用户的交互

十七）性能优化，监听卡顿
1.监听runloop的source事件和进入休眠前，设定一个阀值，超过几次算卡顿
创建信号量
创建主线程的runloop观察者
开启子线程监控，监听runloop的source事件和唤醒事件，连续多次达到多少毫秒就说明有卡顿
事件第三方库CrashReport来上报堆栈信息

十八）耗电优化
定位 不事实更新，定位精确度不要太高
网络请求 减少/压缩网络数据，使用缓存 断点续传 设置超时时间 用户可以取消网络请求 网络不可用时不要执行请求
CPU处理 
GPU处理
屏幕成像原理：CPU计算 - GPU渲染 - 屏幕缓冲区 - 视频控制器读取展示

十九）AOP面向切面编程，Aspects原理
1）消息转发机制，lookUpImpOrForward逐级查找，查找不到就进行消息转发机制，实在没有处理就抛出错误
2）原理：
对象A或者类的方法m被添加切面方法
创建A的子类B，并hook子类B的forwardingInvocation方法进行拦截转发，指向一个block回调函数
把类A的isa指针指向类B，并重写类A的class方法返回类A，尽量减少对A的改动，比较类似于KVO的机制
对于方法m，类B直接把方法的IMP指向objc_msgforward,这样就会直接走消息转发机制触发block

二十）SDWebImage加载图片流程
1）主要是通过SDWebImageManager这个类来进行管理实现的，采用了大量的抽象接口来实现，面向协议编程的方式
2）首先展示placeHolder上面的图片，然后由SDWebImageManager根据url开始处理图片
3）SDImageCache去内存缓存进行查找，找到就回调回来
4）内存找不到，就生成NSInvocationOperation添加到队列从磁盘进行查找，找到后回调到主线程，保存在内存中，内存空间过小，会先清理内存缓存
5）如果磁盘找不到，就使用SDWebImageDownloader下载图片，下载完毕后交给SDWebImageDecoder进行解码处理
6）解码处理是在NSOperationQueue完成，子线程进行解码操作，解码完成后回调给SDWebImageDownloader，进而回调给SDWebImageManager告知图片已经下载完成
7）使用SDWebImageCache将图片进行缓存，以及写入磁盘中，数据管理包括内存层面和磁盘层面的
具体原理：四个类，多个抽象接口来实现的
    SDWebImageManager 通过url来处理图片
    SDWebImageCache 从缓存中获取图片，先从内存缓存获取，找不到就会开启一个子线程去磁盘里面找，找到后回调回来并存在内存缓存中
    SDWebImageDownloader 磁盘中找不到就会创建这个类，开启线程池NSOparetionQueue下载图片
    SDWebImageDecoder 对下载的图片在子线程进行强解压缩，得到能够显示的位图二进制数据，并回调给SDWebImageDownloader
    SDWebImageDownloader回调给SDWebImageManager进行图片的显示
    再交给SDWebImageCache对图片进行内存，磁盘的缓存

二十一）performSelector理解
1）performSelector调用后会在当前runloop中设置一个timer计时器来触发这个方法的执行，如果是在子线程上调用performSelector，那么由于子线程的runloop默认是没有创建的就不会执行，需要创建这个runloop，不回收的话，可以给这个runloop一个source0事件
2）和NSInvocation的区别是，当参数多余2个时使用NSInvocation方便些

二十二）https的单向 双向认证
1）双向认证
客户端向服务器发送请求，服务器返回自己的证书给客户端
客户端检查证书是否是信赖的CA机构签发的证书，证书是否过期，如果不是就给客户一个警告
如果是，客户端对比证书的信息，如域名，一致就认可这个服务器
客户端发送自己的证书给服务器，收到后验证证书
客户端告知服务器自己支持的对称加密方案，服务器选择一种后通过客户端的公钥加密后给到客户端
客户端通过这个方案生成一个对称加密密钥，通过服务器的公约证书返回给服务器
客户端和服务端就可以通过这个对称密钥进行通信了

2）单向认证
客户端向服务器发送请求，服务器返回自己的证书给客户端
客户端检查证书是否是信赖的CA机构签发的证书，证书是否过期，如果不是就给客户一个警告
如果是，客户端对比证书的信息，如域名，一致就认可这个服务器
客户端随机生成一个对称密钥通过服务器公约证书返回给服务器

3）双向认证则是需要服务端与客户端提供身份认证，只能是服务端允许的客户能去访问，安全性相对于要高一些；
SSL单向认证只要求站点部署了ssl证书就行，任何用户都可以去访问(IP被限制除外等)，只是服务端提供了身份认证；

4）AFN做https的认证，AFSecurityPolicy是将服务器的公钥放在客户端，ANF2.0支持去比对本地公钥和服务器返回的公钥，一致就可以排除中间人攻击了

二十三）使用符号表dSYM对线上bug进行调试
1）需要三个文件，.crash文件（需要崩溃的App所在手机导出） 符号文件（.dSYM）应用程序文件（.app文件）
2）要到处.dSYN文件，需要Xcode进行设置，然后在achive的时候导出保存下来，以便后续需要这个文件定位bug
3）使用Xcode的 symbolicatecrash 工具命令行进行生成
4）符号表保存了内存地址，函数和文件名，行号等信息


二十四）NSSet，三大容器之一(数组，字典，NSSet)
1.是一种hash表，内部使用hash查找，查找速度更快，数组需要遍历
2.内存地址不连续，无序，唯一，元素是对象类型
3.NSHashTable是NSSet的通用版本，可以对元素进行弱引用，它只有可变类型，比如一个对象持有属性数组，数组又持有这个对象就出现了内存泄漏

二十五）NSOperation和GCD
1）NSOperation是基于GCD的面向对象的封装
2）在特殊需求，如取消任务，设置任务优先级，任务状态监听，NSOperation更方便
3）NSOperation可以设置任务的依赖关系，GCD只能通过dispatch_barrier_async实现
4）NSOperation可以定义NSInvocationOperation和NSBlockOperation

二十六）hash表，也是通过数组来实现的
1）一般的线性表的查找是通过遍历的，如果不通过遍历查找，而是通过关键值key通过f函数的计算得到内存地址来进行查找，效果更高
2）核心是，存储位置和关键字key之间确立了一个对应关系，查找的过程中，只需要通过这个对应关系和给定的key就可以确定存储的位置

二十七）数据结构 算法
1）顺序存储结构和链式存储结构
2）顺序存储结构，数组，栈 队列
3）链式存储结构，链表，单向，双向，循环链表

二十八）TCP/IP、HTTP、UDP 等网络协议
1）物理层，链路层，网络层，处理数据通信，属于运维关心的事情
2）传输层，tcp/ip协议，数据传输的方式，来实现tcp，udp
3）表示层，会话层，应用层，对数据的处理和包装
4）socket不是协议，而是对传输层协议tcp/ip的一层封装的api
5）TCP协议，点对点的，面向连接的协议，一种全双工通信，连接之前需要进行三次握手，断开进行四次挥手
6）UDP协议，用户数据报协议，不可靠的连接，如ping命令就是UDP协议，来检查两台主机是否通信

二十九）封包 拆包
1）TCP是个流协议，数据是没有界限的一串数据，在发送数据的过程中，数据会被分成多个包进行发送；
2）对于UDP，不存在拆包的问题，因为UDP是数据报协议，两端数据是由界限的，要么接受不了不到，要么接收整个数据；
3）粘包可以发生在发送端，提交数据的时候，TCP不会立刻发送，而是会等待一小段时间，那么就有可能多个包一起提交过来，一起发送
4）粘包可以发送在接收端，接收端不及时从自己的缓冲区把数据取出来，可能造成多个包一起取出来
【包头 包体】【包头 包体】一起发送或者一起接收
5）解决方式，采用sleep休眠方式，效率低
6）采用封包，就是给包添加一个包头，一般包头大小是4个字节表示数据包长度，包体就是数据报内容，根据包头计算包体大小，然后再读取指定大小的数据

三十）界面优化技巧
1）产生原因：显示的过程是电子枪从上到下一行行扫描，扫描完成就是一帧画面，随后电子枪回到初始的位置进行下一次扫描，每次切换到新的一行会发出一个水平同步信号，每次回到初始位置会发出一个垂直信号，这个垂直信号产生的频率就是屏幕刷新率CADisplayLink；
2）页面的显示通常是CPU计算好显示的内容通过数据总线提交到GPU，GPU渲染完成后放入帧缓冲区，显示到屏幕上；
3）CPU的工作包括视图创建，布局计算，图片解码，文本绘制等，GPU的工作是进行变换，合成，渲染，提交到帧缓冲区；
4）如果下一次垂直同步信号到来的时候，CPU或者GPU没有完成内容的提交，就会丢帧，页面显示之前保留的内容，形成卡顿；
5）CPU解决方案
A）对象创建：尽量用轻量级的对象代替重量级对象，不涉及UI的操作放在子线程处理，通过xib创建的视图资源消耗比直接通过代码创建的要大得多，对于性能敏感的界面最好不要使用xib，延迟对象创建，对象的复用等；
B）布局计算：尽量提前计算好布局，在需要时一次性调整好对应属性，而不要多次计算喝调整；
C）文本渲染：屏幕上可以看到的内容控件比如UIWebView，UILabel等，底层都是CoreText排版绘制为Bitmap显示的，其排版和绘制都是在主线层进行的，当显示大量文本时，CPU压力会非常大，可以自定义文本控制器，用CoreText对文本进行异步绘制；
D）图片解码，
E）图像的绘制，COreGraphic框架时线程安全的，可以异步进行绘制
6）GPU解决方案
A）尽量减少段时间内显示大量图片
B）图片过大时，超过GPU的最大纹理尺寸时，图片需要先给CPU进行预处理，这对CPU，GPU带来额外的开销
C）当多个视图重叠在一起，GPU会将他们混合在一起，为了减少GPU消耗，尽量减少视图数量和层次
D）离屏渲染
实例：
预排版：把每个cell需要的数据在后台计算好封装成一个布局对象，每次从布局对象中取；


三十一）block用copy修饰
1）block默认内存是在栈上的，当用copy修饰后就拷贝到堆上面了，用retain也可以，底层也是用copy实现的
2）栈上的block作用域仅限创建这个block时候的上下文，在这个作用域外调用就会崩溃，使用copy就会将block拷贝到堆区，这样作用域外调用就不会奔溃


