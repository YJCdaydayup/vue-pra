1.二叉树，所有节点的度小于等于2，有序树

2.遍历：
前序遍历， 根 - 左 - 右 ABDECFG
中序遍历   左 - 根 - 右 DBEAFCG
后序遍历   左 - 右 - 根 DEBFGCA

3.满二叉树 所有节点的度为2

4.完全二叉树 所有节点的度为0或者2

5.可以数组来存储树即顺序存储结构，可以使用链表来存储树即链式存储结构

6.数组存储二叉树的话，父节点的下标*2+1是他左节点的下标，父节点的下标*2+2是他右节点的下标

7.数据结构分为四大块：
线性数据结构
数组
栈，队列，
堆
链表

树形结构
二叉树 O(n)
二叉搜索树

hash表

Set

LRU Cache

8.O(1)常数复杂度 O(n)线性时间复杂度 O(n^2) O(log n)

9.做题 时间复杂度

10.数组，查找O(1) 插入和删除O(n)

11.链表，通过改变指针的指向来进行插入，删除操作即O(1),查找是O(n)

12.面试题：
1）反转链表：两两交换后，cur和pre同时向前移动一步
1-2-3-4-5-nil 反转为 nil - 5-4-3-2-1
def reverseList(self, head):
  cur, pre = head,None 
  while cur:
    cur.next = pre
    pre = cur
    cur = cur.next 
  return pre  

2)两两节点反转
function(head) {
	pre = null
	pre.next = head

	while (pre.next && pre.next.next) {
		var a = pre.next
		var b = a.next
		pre.next = b
		b.next = a
		a.next = b.next
		pre = a 
	}
	return pre
}

3）判断链表有环
1.不断的遍历链表，看是否会存在nil
2.遍历链表，每走一个节点就往set表存放这个节点，每到一个新节点就去set里面查找O(n)
3.快慢指针，判断是否相遇
function(head) {
	var fast = head
	var slow = head
	while(fast && slow && fast.next) {
		slow = slow.next
		fast = fast.next.next
		if (slow == fast) {
			return true
		}
	}
	return false
}

13.栈，先进后出，队列，先进先出
面试题：判断一个括号字符串是否有效?
1.遍历这个字符串，如果出现”()”,”[]”,”{}”就立刻消掉，最后看这个字符串是否为空；
2.使用栈的数据结构，一开始出现右括号就直接为false，出现左括号就添加到栈底，一旦出现右括号就判断这个括号和栈顶的符号是否是一对，是就移除栈

14.用栈实现队列的效果，原理是定义两个栈，一个叫输入栈，一个叫输出栈，输出总是从输出栈出，输入总是输入到输入栈，每次pop就将输入栈的数据放到输出栈，这样就将栈底的数据拿到了栈顶，达到了队列的效果

15.优先队列，有一个属性设置队列里面的任务的优先级
实现机制：堆
堆：类似搜索二叉树
小顶堆，根据根-左-右的顺序放，越小的数据放在越上面，每次取最上面的数据，每次插入一个元素，整个堆的节点都要进行调整
大顶堆，一样的模式，每一个根节点都大于左右节点的数
面试题：
1.给定一个数组，流式窗口，每次显示K个元素找出最大元素，使用大顶堆
2.找出第三大的数据，采用小顶堆

16.hash表： hash函数的到整数，对数组长度取余，得到数组元素的下标
解决hash碰撞：拉链法，多个key得到相同的下标就在数组的这个节点使用链表

17.Map，映射表，{K:V} =》 hashMap，研究以下js里面的，OC里面的这种类型
面试题：
判断arc rac这种字符串是否为异位字符串，使用map数据结构，每个字母对应一个值为出现的个数，最后比较map，时间复杂度O(n)

18.Set，不可重复 =》hashSet,用于查询和计数，研究以下js里面的，OC里面的这种类型 
面试题：
查找数据列表总是否存在两个数等于K，如[2,7,11,15]是否存在两个数等于9？
1）暴力，两层循环，注意第二层循环从i+1开始，时间复杂度O(n平方)
2）set，y = 9 - x，枚举下x后，从set里面剔除x，然后判断9-x是否在set里面，时间复杂度O（n）
// a + b = 9
function twoSum(arr) {
	let set = [...arr]
	for (var i = 0;i<arr.length;i++) {
		var a = arr[i]
		var b = 9 - arr[i]
		set.splice(set.indexOf(a), 1)
		if (set.indexOf(b) > -1) {
			return ture
		}
	}
	return false
}

3) 三数之和，a+b+c=0，给定数组[-1,0,1,2,-1,4]是否存在a+b+c=0;
解决方案：
方案一：暴力求解，三层嵌套循环，O(n3)
方案二：枚举a，b两层循环，然后去set里面查询-(a+b)在set里面存在，O(n2)
方案三：先排序（快速排序），就可以左右夹击了，在查找，第一层循环loop1，枚举第一个元素，在剩余的数组里面当a+b+c>0则c往后移动一个，小于0，则b往前移动一个

19.树
 二叉树
 完全二叉树
 二叉搜索树：或者叫有序二叉树，指空树或者具有以下特点：所有节点有小于或者大于最上面的根节点
 1.左子树所有节点小于根
 2.右子树所有节点大于根节点
 3.左右子树也分别是二叉搜索树
 要查找就直接和根节点进行比较，只需要找一半，一半，一半等，搜索更加有效率，增，删，查找都是O(logn),最坏的情况是O(n),即只有右子树就是线性的了，可以先打乱在形成搜索二叉树再进行查找

  红黑树
  AVL Tree

 面试题：
1）判断是否为有效二叉搜索树，
办法1：中序遍历得到的数组是否为升序的数组
2）寻找最小公共祖先节点？
从根节点进行查找，如果左子树可以查到返回左子树根节点，如果右子树可以查到返回右子树根节点，两边都可以查看一个则root是最小公共祖先，只在一边可以查到就继续迭代左子树或者右子树，直至根节点等于其中一个就返回这个值
function lowestCommonAncestor1(TreeNode root, TreeNode p, TreeNode q) {
	if (root == null || root == q || root = q) {
		return root
	}
	TreeNode left = lowestCommonAncestor1(root.left, p, q)
	TreeNode right = lowestCommonAncestor1(root.right, p, q)
	if (left == null) {
		return right
	}	
	if (right == null) {
		return left
	}
	return root
}
3）寻找二叉搜索树的最小公共祖先
function lowestCommonAncestor(root, p, q) {
	while (root) {
		if (p.val < root.val && q.val < root.val) {
			root = root.left
		}
		if (p.val > root.val && q.val > root.val) {
			root = root.right
		}
		return root
	}
}

20.图，树就是特殊化的图，可以链回到自己的节点

21.递归
1）计算n！
function factorial(n) {
  if (n <= 1) {
     return 1
  }
  return n * factorial(n - 1)
}

22.分治，将一个大问题，分解成二级小问题，再继续分解，最后将小问题一一解决
面试题：
1.计算x的n次方
function xn(x ,n) {
	if (n === 1) {
		return x
	}
	return xn(x, n - 1) * x
}

2.判断数组是否有众数，count(x) > n/2
1)暴力求解，2次循环 O(n2)
2）map数据结构：{x: count_x}，最后找出最大的count，O（n）
function zs(arr) {
	let map = {}
	for (var i = 0;i<arr.length;i++) {
		var val = map[arr[i]] 
		if (!val) {
			map[arr[i]]= 1
		}
		map[arr[i]] ++
	}
	return map
}

3）先sort，再遍历，重复的次数大于n/2 O（nlogn）


23.贪心算法
面试题：知道几天的股价，最多持有1股，每天可以买卖无数次，求最大收益
function stockBestTime(arr) {
	var sum = 0
	for (var i = 0;i<arr.length - 1;i++) {
		if (arr[i + 1] > arr[i]) {
			sum += arr[i+1] - arr[i] // 遍历每个数，只要后一天比前一天大，就获取后一天比						     前一天的差值
		}
	}
	return sum
}

24.广度优先搜索，针对树进行一层一层的搜索，像水波浪一样逐步开来
25.深度优先搜索，从子节点遍历到最深处，再回过头来看每个子节点有没有叶子节点再进行查找
面试题：
1）二叉树层次遍历 广度优先搜索





   


