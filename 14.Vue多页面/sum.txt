1.通过给每个vue文件指定入口文件，可以实现vue的多页面
2. devServer: {
        clientLogLevel: 'warning',
        historyApiFallback: true,
        // hot: true,
        compress: true,
        host: 'localhost',
        port: 8080
    },定义本地服务测试页面，对于多个页面一一进行测试，就在输出html的filename:'index.html',谁是index.html就热加载谁
3.子组件通信给父组件，一般可以在子组件中用this.$emit('add-ball'， this.count)，然后在父组件中<compo @add-ball="add">拿到回调，还可以在子组件中通过event.$emit('addball',this.count),父组件里面在created函数中加，event.$on('addball',(count)=>{})监听这个事件，前提是定义一个new Vue()对象作为event，大家都用这个event
4.自己通过webpack搭建的vue多页面，也可以进行第三方组件的安装，并在页面入口js文件中注册到Vue中，就可以了，比如Vuerify
5.导入了Vue就意味着window上已经有了Vue构造函数，就可以直接使用Vue.use()了，就意味着在html里面测试Vue时，通过script导入Vue时可以直接使用了
6.自定义Vue组件上传到npm上时，先创建一个继承根vue的Vue实例，let instance = Vue.extent(myVue),然后new instance(),再$mount绑定到document.querySelector('#app')上，其实封装
起来就是，new Vue({el: '#app'},router,computed: {
                                         ViewPage() {
                                             return cart_by;
                                         }
                                     },
                                     render(h) {
                                         return h(this.ViewPage);
                                     }),其中使用封装的话就可以方便使用路由了；
7.使用第三方Vue UI插件时，如果看不到效果也没有报错，先检查一下css文件是否引入，不行就在最外层的index.html模版里面手动引入这个css文件;
8.对于Vue开发，在Vue文件里面编写css的时候，要申明lang，lang可以是css stylus scss less，然后在webpack.config.js里面的规则中，对应的文件用对应的规则获取，并按照它正常的顺序进行解析，最底层的loader统一采用vue-style-loader;
9.如果使用了node_modules中第三方插件的css，且通过import引入了，在对应的规则解析下不能排除node_modules //exclude: /node_modules/,不然
10.单独打包出js文件可以不使用html-webpack-plugin，会起一个服务器通过这个服务访问这个js文件，使用了html-webpack-plugin就可以build出模版文件和dev出热更新网页；