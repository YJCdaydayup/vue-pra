1.nodejs是运行在服务器上的，可以直接使用ES6语法；
2.nodejs是单进程单线程应用程序，但是V8引擎提供的异步执行回调接口可以处理大量并发，所以性能非常高；
3.nodejs单线程类似进入一个事件循环，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数；
4.nodejs使用事件驱动模型，当webserver接收到请求，就放到队列里面，然后继续监听下一个请求
5.nodejs中的观察者模式用的events模块，通过emit发布事件，通过on进行监听事件；
6.所有的回调都会放到一个事件队列中去；
7.每次新的连接就触发一个事件，每次文件打开触发一个事件，所有这些事件都是events.EventEmitter的实例，监听事件的对象一直处于监听过程中，当事件处理完就放在队列中去，eventloop循环来调度处理回调出去；
8.on和emit同一个事件都可以多次监听同一个事件也可以同时监听不同的事件；
9.对于某个事件on监听必须写在emit之前，不然监听不到的；
10.error事件要单独设置，发送的error事件，如果不做监听就会报错了，其他的事件发出了可以不做监听，但error必须监听；
11.Buffer缓冲区，独立于V8堆内存之外的一块原始内存，实例存储的是二进制原始数据，类似一个整数数组，当处理I/O操作中移动的数据时，可能使用Buffer库；
12.Buffer实例表示编码字符的序列，如utf-8，UCS2，Base64或十六进制;
13.Buffer理解成一个整数数组，初始化的时候可以指定大小，里面的整数，也可以传入字符串(自动的分配到一个数组中，每个字节一个位置，存放的是对应的ascii数字值，当时中文时，一个中文对应3个字节，有三个位置存放对应的码值)；
14.Stream流本身就是一个事件，属于EventEmitter的实例，有读取流，写入流，管道流
15.nodejs中定义模块（字面量对象和构造函数）输出一般使用module.exports = Dog, 其他的单个方法输出，或者常量输出就用exports.func1 = function() {} exports.APIs = {}
16.nodejs中的全局对象global在任何地方都可以访问,所有全局变量都是global的属性，除了global，和h5开发中window一样的，三种情况下属于全局变量: 最外层定义 全局对象的属性 未声明直接复制；
17.在nodejs中不可能在最外层定义，因为所有的代码都是当前模块的，而模块本身不是最外层上下文；
18.永远不要使用var定义变量以避免引入全局变量，污染命名空间；
19.__filename获取的是当前模块文件的绝对路径；__dirname获取的是当前模块文件的绝对目录路径；
20.Web服务器就是提供Web信息浏览服务，只需支持HTTP协议，HTML文档格式和URL，与客户端的网络浏览器配合；
21.目前主流的三个Web服务器是Apache Nginx IIS
22.Web应用架构: Client => Server（Web服务器）=> Business Layer（业务层，业务bus,数据交互 逻辑运算 调用外部程序）=> Data Layer（数据库）
23.Web服务器通过脚本从数据库获取数据(php，python，ruby)
24.文件上传必须设置enctype编码类型，默认有三种:application/x-www-form-urlencoded不能用于文件上传，mutipart/form-data才能完整的传递文件数据，text/plain纯文本上传，不对特殊字符编码，空格转+
25.如果返回乱码，可以res.writeHead(200,{'Content-Type':'text/html;charset=utf-8'});如果是express框架就res.setHeader('Content-Type', 'text/html; charset=utf8');
26.app.listen(8081, '必须是本地的IP才行', function() {})
27.readFile读取的data就是字符串数据；
28.通过res返回出去的数据必须是string类型或者是Buffer对象类型，readFile拿到的就是Buffer对象这个buffer对象可以调用toString()转字符串，或者JSON.parser()转JSON对象
29.express框架下get请求获取?a=b&c=d就用req.query下拿，动态路由参数要用params下拿，但动态路由要配合定义一个接口app.get("/:id", function(req, res) {})参数就从req.params.id下拿，请求的发送方式就是localhost:8081/2








