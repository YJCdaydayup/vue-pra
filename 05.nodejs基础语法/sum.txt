1.nodejs是运行在服务器上的，可以直接使用ES6语法；
2.nodejs是单进程单线程应用程序，但是V8引擎提供的异步执行回调接口可以处理大量并发，所以性能非常高；
3.nodejs单线程类似进入一个事件循环，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数；
4.nodejs使用事件驱动模型，当webserver接收到请求，就放到队列里面，然后继续监听下一个请求
5.nodejs中的观察者模式用的events模块，通过emit发布事件，通过on进行监听事件；
6.所有的回调都会放到一个事件队列中去；
7.每次新的连接就触发一个事件，每次文件打开触发一个事件，所有这些事件都是events.EventEmitter的实例，监听事件的对象一直处于监听过程中，当事件处理完就放在队列中去，eventloop循环来调度处理回调出去；
8.on和emit同一个事件都可以多次监听同一个事件也可以同时监听不同的事件；
9.对于某个事件on监听必须写在emit之前，不然监听不到的；
10.error事件要单独设置，发送的error事件，如果不做监听就会报错了，其他的事件发出了可以不做监听，但error必须监听；
11.Buffer缓冲区，独立于V8堆内存之外的一块原始内存，实例存储的是二进制原始数据，类似一个整数数组，当处理I/O操作中移动的数据时，可能使用Buffer库；
12.Buffer实例表示编码字符的序列，如utf-8，UCS2，Base64或十六进制;
13.Buffer理解成一个整数数组，初始化的时候可以指定大小，里面的整数，也可以传入字符串(自动的分配到一个数组中，每个字节一个位置，存放的是对应的ascii数字值，当时中文时，一个中文对应3个字节，有三个位置存放对应的码值)；
14.Stream流本身就是一个事件，属于EventEmitter的实例，有读取流，写入流，管道流
15.nodejs中定义模块（字面量对象和构造函数）输出一般使用module.exports = Dog, 其他的单个方法输出，或者常量输出就用exports.func1 = function() {} exports.APIs = {}
16.nodejs中的全局对象global在任何地方都可以访问,所有全局变量都是global的属性，除了global，和h5开发中window一样的，三种情况下属于全局变量: 最外层定义 全局对象的属性 未声明直接复制；
17.在nodejs中不可能在最外层定义，因为所有的代码都是当前模块的，而模块本身不是最外层上下文；
18.永远不要使用var定义变量以避免引入全局变量，污染命名空间；
19.__filename获取的是当前模块文件的绝对路径；__dirname获取的是当前模块文件的绝对目录路径；





