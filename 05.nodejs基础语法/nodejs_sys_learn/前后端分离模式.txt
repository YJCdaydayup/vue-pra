1.核心思想，前端html页面通过ajax调用后段的RestFul API使用JSON数据进行交互;
2.在互联网架构中:
  Web服务器，nginx apache，解析静态资源
  应用服务器，tomcat，jetty，resin，既可以解析静态资源(没有web服务器好)，提供api接口数据
3.以前后端人员既写前段代码，也写后端接口，效率慢，前后端分离后，前段人员可以利用nodejs搭建本地服务器，然后通过插件将ajax请求转发到应用服务器上，实现前后端解耦；
4.如果不用前后端分离有个大问题，浏览器通过DNS服务器找到外网ip地址后，将http请求发送到服务器，进过tcp3次握手，开始传输数据，以报文的方式传输，浏览器通过content-type来解析返回的内容，层现出来；
5.如果首页有100张图片，一般需要100次ajax请求，服务器要耗费内存创建socket来进行tcp传输(不考虑http长连接短连接的问题)，服务器压力会非常大，当用户量增大时，服务器的内存，硬盘，IO消耗非常大，所以前后端分离非常重要；
6.每次改了后端代码，前段也要跟着发布，麻烦；
7.正常的互联网架构都是要拆开的，web服务器集群，应用服务器集群，文件服务器集群，数据库服务器集群，消息队列集群 缓存集群等；
8.jsp性能低，必须支持java服务器，nginx不支持。nginx单实例http并发高达五万；同步加载，响应慢

优势，
1.前端，使用nginx，控制页面引用，路由，跳转，异步调用后端接口，nginx反向代理tomcat
2.如果要玩轻量级微服务架构，要使用nodejs做网关，因为nginx不会进行页面的组装渲染，需要把静态页面资源返回到浏览器，然后完成渲染展示，加重了浏览器的负担，可以使用nginx分发到nodejs，在nodejs中进行页面组装渲染，API请求则直接发送到后端服务器完成响应；一般使用nginx反向代理都不会有跨域问题；
3.前端项目与后端项目是两个项目，放在两个不同的服务器，需要独立部署，两个不同的工程，两个不同的代码库，不同的开发人员。