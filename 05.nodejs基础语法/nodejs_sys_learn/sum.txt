O第一节课
1.模块化，解决命名冲突和文件依赖和无法私有性，如日志模块,最早常采用命名空间法来做的，var caculator = {}, caculator.add=function() {}
2.驼峰命名法+匈牙利命名法(加上了类型)如numA，fnCaculator=function(){}
3.还可以使用(function(){})()来定义模块
4. Sea.js是CMD的规范，阿里巴巴的玉伯开发的
5.开发环境用原版的jquery.js的话，生产环境要用jquery.min.js文件，请求的文件更小
6.Sea.js开始解决了依靠html来加载各个js文件了，JS中可以加载其他的JS了

第二节课
1.nodejs中每个文件都是一个模块，通过module.exports输入，通过require打破封装性进行引入；
2.require的原理，通过module.exports输入后，require本身是一个函数，引入路径参数后，读取js模块文件内容进行拼接字符串，然后eval执行获取函数，执行和这个函数的到js模块里面exports或者module.exports输入的函数或数据；
3.module就是一个全局属性，通过require后，第一次会执行js里面所有的代码，然后将module对象缓存起来，下次require直接从缓存中module对象中取，js模块中无关代码不会再执行；
4.module对象包含id(最外层的是.)，export对象 parents children
5.require本身是同步读取js模块文件的
6.nodejs中require的读取先后顺序
7.在模块加载机制中nodejs采用延时加载的策略，只有在用到的时候才会加载，加载完成后会放到binding_cache中，缓存的是module对象；
8.模块分为，核心模块(直接通过模块名引入) 文件模块(路径引入) 包(模块名引入)
9.文件模块分三种，默认会自动给模块添加后缀进行加载 js json node，加载过程中是以同步阻塞模式判断文件是否存在，从性能优化的角度，.json .node文件最好加上扩展名
10.require可以引入核心二进制模块，文件模块(js文件模块 json文件模块 node文件模块)
11.require加载模块的机制，首先加载核心模块，因为核心模块已经被编译成二进制加载到系统内存中了，速度快，效率高，其次按照相对路径和绝对路径查找，没有扩展名就自动按照js json node添加扩展名，最后会搜索node_modules目录，首次加载这类模块最慢，找不到会去父级node_modules目录查找，找到后会缓存起来，以后加载会很快；
12.node_modules是固定好的包管理文件夹，npm包管理器下载后的包都存在这个文件夹里面，定义一个包需要package.json和index.js入口文件，如果这个包有其他依赖就放在它的node_modules里面,另外还有libs存放其他依赖文件，bin存放二进制文件


第三节课
1.nodejs中的循环引用，是采用nodejs引擎自由的一套处理机制来处理的，以断点为出口执行其他模块，然后以断点为入口进行返回执行断点以后的代码。
2.nodejs中读取JSON文件，可以直接使用require即可，无需通过fs读取
3.var a = require('./a') var b = require('./b');这里如果a和b文件模块相互引用了，第一次引入a时，b的module就已经放到内存缓存中了，下次引用文件模块b时就直接去b的module中取方法和属性，而不会执行b里面的无关代码了
4.npm i -g 属于全局安装命令行，放在npm安装时就创建的一个全局目录里面，npm i 只是安装依赖包文件
6.Sea.js开始解决了依靠html来加载各个js文件了，JS中可以加载其他的JS了，解决了文件依赖的问题了
7.module.exports本身就是一个对象，用于打破封装性
8.require的原理，创建了script标签，引入js
9.exports是module.exports的别名
var module = {} module.exports = {} var exports = module.exports,这个时候exports=123，module.exports还是{}，所以别名只能用于添加属性；

第二节课
1.内核->js引擎(转化，移植性)，js引擎套一个壳子，写js代码传递给js引擎操作硬件就是nodejs
2.nodejs V8引擎去解析js，没有浏览器兼容性问题；
3.理解：nodejs是js的运行平台
4.事件驱动，无阻塞，看似单线程，其实是看到的是主线程一个人在忙，主线程看到异步任务会安排子线程来处理，底层还是多线程的
5.js->v8->中间层libuv(C++编写)->操作硬件就是nodejs
6.云服务器就是一台电脑，需要外网ip，我们自己只有内网ip
7.node+回车进入repl交互式运行环境，用于试验api
8.Zeal离线文档查找工具

第三节课
1.进程，线程，单线程 多线程 线程包括同步 异步（事情接收到了就分配下去，callback的时候就回调出去）
2.所有的定时器都是异步的
3.线程执行队列中的同步队列和异步队列，会先执行所有同步队列，然后再执行里面异步队列，一个同步队列卡住了，整个线程都会卡住
4.异步非io操作，setTimeOut setInterval异步最终还是在主线程执行，异步IO操作，文件操作 网络操作 fs但不会阻塞原理是node底层还是采用多线程的，看是单向线的底层的多线程的
5.callback里面的事情还是交给主线程来干，主线程绝不执行异步，只做判断交给子线程来做，最后回调都在主线来执行，把主线程想成包工头，同步的事情他来做，异步的他来安排子线程做，一直处于自由灵活的状态，所以看起来就是单线程，实际上有多线程
6.异步队列交给子线程来做了
7.有个线程池，有几个备用子线程在里面休息，我们来写异步，系统自己安排子线程，所以我们写的是异步，没写过开启子线程
8.node不擅长做大量运算的东西，比如加密解密涉及大量运算，这叫做CPU密集型操作
9.复习以下GCD对线程，对比区别
10.nvm npm nrm(改变npm的数据源)
11.nodejs里面处理回调的时候约定使用这种(err,data)=>{},if (err) {callback(err)} if (data) {callback(null,data)}，以后我也这样用
12.文件模块中使用了module.exports={},那么相当于把默认空对象指向了其他的对象并将其返回了，再用exports输出是无效的

第四节课
1.fs模块中readFile有三个参数，如果‘utf8’不传，就会返回Buffer对象，存储的是二进制01编码；
2.同步一般使用return进行返回，异步使用callback，同步中不要使用callback处理，没有意义；
3.require引入模块进来后，执行代码的时候，如果调用了require模块的代码，相当于是把module.exports的代码拿到这个文件地方执行，引用路径是相对于执行的当前文件的，如果读取路径要是当前本文件的路径，就加__dirname + ‘/config.json’;
4.__dirname会在require出去的时候已经换算出来了路径传递过去了
5.throw出去，代码就不执行了，抛出错误了
6.同步代码里面要大量使用try catch，try catch是同步代码，不能捕获异步里面的代码，如果要捕获异步里面的代码，那么需要把try catch放到回调里面进行捕获，回调里面又到了主线程；
7.异步里面的err其实和里面放trycatch捕获的异常是一样的
8.var err = new Error; err.code = 100,用于判断系统的error在返回自己的error；
9.readFile(‘./’,’utf8’,callback) writeFile(‘’,内容，‘utf8’,callback)
10.appendFile追加文件 mkdir(‘./a’,(err)=>{})创建目录 
11.fs.readdir(‘./’, (err, files是数组)=>{}) 读文件夹没有编码格式,只读当前文件夹中的内容，返回所有文件名数组，不带路径
12.fs.access(‘./a’,()=>{})判断文件夹或者文件是否存在
13.nodejs中有多个异步时，由于异步处理完成后都会回到js主线程，如果在回调中处理CPU密集型任务，如解压，压缩等，就会造成主线程阻塞，后面的异步的回调阻塞起来；
13.fs.stats(‘./a’,(err, stats)=>{})判断文件是否是文件或者目录 大小等属性
14.path模块会帮我们处理好路径，使用__dirname拼接时，处理好路径提高了代码的容错性path.join(__dirname, ‘./a’)
15.path.basename(‘./a.js’)通过路径取带后缀的文件名,同步方法
16.path.basename(‘./a.js’,’.js’)通过路径取不带后缀的文件名,同步方法
17.path.dirname(‘/foo/bar/baz/test.js’)获取所在文件夹路径
18.path.extname(‘/ac/sc/js.js’)

第五节课
1.js的调试，如果是浏览器上调试可以再资源中找到js文件加断点 debugger console.log
2.如果是nodejs的调试，可以使用node debug test.js，n跳过方法 s进入方法 o出方法 node-inspector也可以
3.也可以使用webstorm中的Run下的debug继续调试，运行debug就会停留在断点处，里面有刷新，进入下一个断点，取消全部断点的功能；VS Code IDE开发软件
4.'use strict'严格模式，防止出现怪异现象 ，严格模式a=1就报错，let作用域方括号里面，如for循环里的使用的每一个{}中的i都是唯一的,每个{}中的i是一个新的变量，作用于{}中，比较类似于闭包里面维系变量
5.以后node使用中就使用let const,引入模块使用const声明
6.如果模块中使用多个exports.进行导出，可以使用const {test} = require('/test')来导入其中模块某些属性方法
7.写css的时候，&.seleted是stylus里面的，如果是style里面的话，cls.selected是一样的，previousElementSibling获取下一个兄弟标签
8.const是常量，作用范围也是{}中，每个{}产生一个常量const a，作用于{}中，但是不能改变这个a的值；
9.es6中的字符串扩展，str1.includes(str2)是否包括str2，startsWith endsWith repeat(2)
10.let baz = `woshi${foo}养了`进行字符串拼接
11.使用promise能将同步变成异步，只要将同步的代码写到promise里面，比如在new Promise((resolve,reject)=>{fs.readFileSync(‘./test.js’,’utf8’)})
12.Buffer像一个数组，存的元素是16进制的两位数(0-255的值)，全局对象，使用时无需require
13.0-255的值每个值对应一个字母，中文，符号，ASCLL编码其实有一个字典对照表，但表中无支持中文，在ASCLL码基础上扩展了一个新的字符集编码gb2012，字典是utf8
14.当读取的文件过大时，比如下载，通过文件流的形式传输文件createReadStream createWriteStream pipe,如果要进度的话，使用rs.on(‘data’,()=>{}), 文件读取的时候就是buffer

第六节课
1.CDN节点，是将静态资源存放在就近的服务器上，便于快速访问，只存放静态资源，不能提供接口；
2.可以使用JSONP请求来处理跨域，了解，尽量不用JSONP，如京东618打折活动
3.可以添加一个服务器来封装接口并提供web服务来解决跨域问题；可以使用Nginx做代理转发请求
4.图片，css，js，iframe，link支持跨域，只有ajax才不支持跨域(我的页面是从那个服务器拿出来的，对应的js文件里面的ajax请求必须要也从这个服务器拿才叫不跨域)
5.从CDN拿到静态资源调用ajax请求时，必须跨域从主服务器获取了，叫动静分离，可以使用JSONP
6.服务器之间可以做数据请求不涉及跨域只有浏览器才有跨域
7.页面->（核心数据，评论数据）node服务器->评论系统+核心系统（当压力过大就降权，将评论系统断掉）
8.DNS域名解析，计算机与计算机通信，必须通过ip地址来定位该机器位置，浏览器默认添加80端口，万维网提供域名便于好记，输入域名后，浏览器会自动去找DNS域名解析服务器去解析获取ip地址
9.读取文件属性采用fs.statSync('./test.txt')，同步读取
10.服务器要从三个方面去阐述，硬件(塔式/刀片 硬盘容量 内存容量 支持CPU个数 单个cpu支持的计算引擎个数(多核)) 操作系统(一般用linux系统有centos ubantu)
  服务器的类型:Web服务器 FTP服务器 SMTP服务器 数据库服务器
  提供服务的应用程序(安装在操作系统中的):提供Web服务的(网页，接口)采用的应用程序:Apache IIS Tomcat Nginx
  nginx 反向代理，本身不执行，桥梁作用，把请求转给web服务器，再把响应转给用户，将多个web服务器整合成一个虚拟的更强大的服务器
  iis 微软开发的web服务器 收费 主要跑.net php 只能在window上
  apache apache基金会的web服务器 免费 只支持静态页面 html容器 广泛
  tomcat apache基金会的java服务器 跑jsp php python
11.node本身就是一个web服务器，提供web服务，不需要依赖上面的应用程序提供服务
12.ip唯一标识一台机器，端口代表不同的应用程序或者说服务，只要是协议，域名，端口，ip有一个不同的url都是不同的域；
13.拒绝跨域请求是浏览器保护用户信息安全的一种策略，不经过浏览器是可以请求的，比如服务端测试接口postman curl;
14.Cookie中的同源只关注域名，忽略协议和端口。所以https://localhost:8080/和http://localhost:8081/的Cookie是共享的,对于跨域的cookie要实现可以传递共享，一方面要服务器同意,指定Access-Control-Allow-Credentials字段，另一方面开发者要打开withCredentials=true
15.在浏览器中，script img iframe link等标签可以加载跨域资源，且加载的资源被认为是同源的，所以浏览器限制了js读写文件权限，对html是做了同源限制的，对js里面的ajax也是做了同源限制的；
16.JSONP和ajax没有关系，只支持get请求，采用的是script的src可以加载跨域的动态js脚本，并且加载到的脚本被浏览器执行
第一种
<script src="http://localhost:8081/test_data.js"> 
  <script> 
    function test_handler(data) { 
      console.log(data); 
    } 
</script>
第二种
<script type="text/javascript"> 
    // this shows dynamic script insertion 
    var script = document.createElement('script'); 
    script.setAttribute('src', url); 
    // load the script 
    document.getElementsByTagName('head')[0].appendChild(script);  
</script>
17.解决跨域的另一种办法，采用代理方式跨域就是Nginx，通过Ajax从http://localhost:8080访问http://localhost:8081/api，可以将请求发往http://localhost:8080/api，然后利用Apache Web服务器的Reverse Proxy功能做如下配置（还可以在同源服务器上重新开发接口）
18.客户端请求两种行为：(其实跨域是浏览器和服务端一起控制的,叫做CORS跨域资源共享)
   1. 直接发送请求，然后检查服务器返回的response的Accxess-Control信息，如果自己的域名在允许的访问列表中，则读取response body，否则放弃。 response.set_header("Access-Control-Allow-Origin", "http://localhost:8080")
   2. 发送OPTIONS请求，向服务器请求Access-Control信息。如果自己的域名在允许的访问列表中，则发送真正的请求，否则放弃请求发送。 需要支持CORS的服务器在响应头中设置
     this.response.setHeader('Access-Control-Allow-Origin','*')
     this.response.setHeader('Access-Control-Allow-Methods','GET, OPTIONS')
     this.response.setHeader('Access-Control-Allow-Headers','Origin, Accept, Content-Type’),这个既适用于http模块也适用于express框架
   CORS协议提升了ajax的跨域能力，但一旦网站被注入脚本或XSS攻击，将非常方便的获取用户信息并悄悄传递出去。只需要注入js后，诱使用户 点击一个恶意链接，或者 提交一个表单, 能悄悄的将用户的数据传出去；
19.XSS与CSRF的对比总结；XSS是利用用户对指定网站的信任，如对评论内容进行编码和解码防止恶意注入，CSRF是利用网站对用户的信任
20.同一个源或者同一个服务器出来的ajax请求，可以不写协议域名端口，如https://www.,baidu.com/api只写/api
21.node没有web容器，本身就是web服务器
22.网络协议就是双方约定好的数据格式，七层，物理层，链路层(局域网) 网络层(ip协议，通过ip定位唯一设备) 传输层(TCP三次握手,UDP) 应用层(http协议)
23.http协议通过报文传输，分两部分，请求头+请求体(post才有) 响应头+响应体 请求工具: curl -v www.baidu.com
24.请求头，get user-agent 协议版本http1.0 host Accept(接收的数据格式)
25.http协议是无状态，要服务器管理每次请求的客户消耗资源，有登录需求时，这个时候使用cookie保存在浏览器，每次请求自己携带，cookie上存放登录令牌Token，对应的服务器存放一个session来保存用户信息，响应的时候服务器反馈一个setCookie保存在服务器本地，cookie有过期时间，session没有设置过期但保存了过期时间；
26.iframe嵌套页面
27.get请求后面传递参数可以是?，也可以是/以路径方式做传参，如 http://www.baidu.com/list?a=1 或者http://www.shsh.com/list/1
28.正向代理是一台服务器访问国外的服务器VPN代理用户，反向代理是在多台服务器上相同的服务通过Nginx代理服务器进行转发，平均分配叫负载均衡提高性能，nginx里面做一个跳转，可以设置权重；正向代理用的Nginx；
29.正向代理代理的是客户端，反向代理代理的是服务器；

第七节课
1.三次握手，四次挥手；
2.网站的优化：
  能压缩的压缩，能合并的合并
  少用js去遍历对象或者写for循环
  提前运算好，使用枚举法
  cdn
  响应式图片，根据手机屏幕像素选择不同大小的图片
3.svg图片是用xml做的矢量图，可以无限拉伸
4.localhost:3000不走网卡，127.0.0.1：3000 浏览器走网卡请求 192.168.141.24：3000浏览器走网卡请求发给交换机，交换机请求电脑,IP是交换机产生的地址
5.localstorage做离线缓存的购物车时，可以使用时间戳来判断上传物品数据；
6.请求分两种:
  浏览器发起的请求，会先执行回来的数据，是文本就显示，是js脚本就执行，执行不了就下载下来；
  Ajax发起的请求，正常的网络请求，数据解析；
7.采用原生的http模块进行部署服务器，对路由的控制注意两点，1.直接写路径即可，这点和express一样；2.在on('request',(request,response)=>{})方法里面判断url和method要区分不同路由；
8.采用原生的http模块通过fs读取返回页面有个问题，就是fs读取文件都是异步的，控制index,css,js的先后顺序很重要，也很麻烦，所以不建议这样做；
9.nodejs编写模块，只能使用module.exports是同步的，export default是异步的网页就用；对象方法要用this，那这个方法必须写在prototype原型里面；
10.VPN就是在内网架设一台VPN服务器，通过外网连接VPN服务器，然后通过VPN服务器进入内网，VPN服务器和客户之间的数据是加密的，数据到达用户后将其解封核对数字签名后解密处理；
11.串行和并行是执行任务的方式，同步和异步是是否开启新的线程，要执行并行必须先开启异步(子线程)；串行队列是开启一个队列，将对个异步任务加进来按顺序执行，并发队列是开启一个队列，将多个异步任务加进来并发执行，主线程是一个特殊的串行队列。nodejs是单线程的，里面没有队列的概念，只有同步任务和异步任务的概念；
12.keep-alive是请求建立3次握手连接后响应完成，但是连接不会一下子就断掉，所以我们看到马上第二次请求就会很快返回了；
13.Buffer对象就是一个类数组，要操作它最好可以定义一个数组进行push拼接chunk，最后toString获取出来；也可以通过let buf = '',然后 buf += chunck;来处理
14.request当是POST请求的时候就是一个读文件流，on('data')和on('end')来读取请求体里面的数据，请求体里面的数据通过querystring核心工具模块进行解析得到对象k:v;
15.GET请求携带参数时，要做路由判断，必须拿到respose.url进行url核心工具模块的url.parse(request.url,true) true生产的query就是对象，false就是字符串；pathname就是路由了；
16.如果请求html页面，里面的script标签src上是相对路径，./1.js，那边这个.就是对于html的协议ip端口；
17.由于V8引擎有内存设计的限制，32位环境中最大堆是1G，64位环境中最大堆也不到2G，如果要一次读入10G数据，对于Nodejs来说也无法实现。
18.crypto模块提供通用的加密和hash算法，采用C/C++编写，提供js接口，算法：
   1.MD5，SHA1 SHA256 SHA512哈希算法加密
   2.HMAC加密，增强版hash算法，在前面hash算法的基础上加一个密钥，密钥发生变化，值也发生变化
   3.AES对称加密，加解密同一个密钥,AES192 AES-128-ecb AES-256-cbc,确认双方是否遵循同样的AES算法，字符.  串密钥和IV是否相同，加密后的数据是否统一为hex或base64格式。
   4.DH算法，密钥交换协议，双方协商计算出一个密钥，并没有明文的传递密钥；质数，底数，秘密整数，由于第三方无法知道两方的秘密整数，无法计算密钥
   5.RSA非对称加密，私玥保存，公钥可以公开。服务器传给客户端，私玥加密公钥解密，客户端传递给服务器，公钥加密私玥解密
19.Buffer对象就是一个类数组，要操作它最好可以定义一个数组进行push拼接chunk，最后toString获取出来；
20.request当是POST请求的时候就是一个读文件流，on('data')和on('end')来读取请求体里面的数据
21.h5页面和nodejs不是一个主服务器，ajax请求要写协议域名端口加路径和参数，而且是跨域的，如果是一个主服务器就ajax请求直接写路径也不跨域了；
22.命令转移和定义全局命令: 可以在package.json手动添加script:{“start”: ‘node 1.js’}，可以在当前目录下用npm start执行这个js文件；命令转移，转移到package.json里面去，左右还可以用于执行脚本来做一些事情封装成全局命令；添加“bin”: {“hehe”: “my.js”},然后编写my.js脚本，然后npm link 全局化即可,就可以使用hehe命令了；

第八节课
1.fs读取文件等操作是可以写相对于被执行文件的相对路径的，fs.readdir('./../', (err, files)=> {}，迭代器强行将异步变成同步

第九节课
1.文件上传插件，商用了，formidable,http请求POST请求体本身就把文件一块一块上传了； 
2.fs.rename(path1,path2,(err)=>{}) 对文件进行重新命名，或者更换文件路径也换名(./newpath/newname.txt);
3.util.inspect方法研究；
4.jade模版引擎采用的是缩进的办法来表示的，类似python；
5.完成练习作业

第十节课
1.Express是node框架，在后台受欢迎的程度和jQuery一样；
2.原生的路由判断很多，不能集中精力写业务，要考虑很多其他东西；
3.get请求有两种，分别如何去参数，post请求的请求参数怎么取
4.app.all(‘/’,(requires)=>{})处理这个路由的所有请求，包括‘/a’下的get post delete
5.使用express时，实际网络请求中路由的大小写是不区分的，但http原生是区分的；
6.使用app.get(‘/student/:id’,()=>{})时，这里id位数判断，可以使用正则直接在路由里面判断这个请求能不能进来，或者可以这种都进来，然后在回调里面处理id的数字位数，推荐使用后者，正则麻烦一些
7.express框架中回调app.get(‘/:username/:oid’),(req,res)=>{})上的req，res和原生的http模块的req，res不一样的；一般在express框架中返回用res.send()（只能send一次）,但也可以使用req.write()+req.end()
8.在express中可以使用模版引擎ejs，两种方式，第一种是直接写ejs语法和ejs文件做绑定，render或rednerFile之后由res做返回，第二种是app.set(‘view engine’, ‘ejs’)导入ejs模块就可以了，用的时候ejs文件必须要在子目录views里面，app.get('/', function (req, res) {    res.render('form’,{name: “Sara”});})这个form就是ejs文件名，返回这个文件名
9.ejs文件里面提交表单如果用’/‘，那么就可以使用#代理；
10.Restful路由设计， 所见即所得的路由，一个路径，但是http method不同，对这个页面的使用也不同；
11.定义的server.js文件，若使用http原生，每次响应都只执行回调里面的代码，在这个请求回调外声明的变量a=100的话，以后这个变量在服务的生命周期里都存在的，可以改变，下次请求依然在,这点在express框架下依然可以；
12.Express下，所有的路由就是中间件，第一个路由匹配上后，如果参数里面(req,res,next)=>{}没有next()就不会继续往下找匹配的路由了，如果遇到冲突第一种办法是绝对匹配的路由放倒上面(具体的往上写)，第二种办法:
let username = res.params.username;   if(username数据库存在) {res.send(‘用户信息’)}else {next()};
13.app.use(‘/admin’,(req，res)=>{})特殊的中间件，能匹配admin下的子路由，req.originalUrl req.baseUrl req.path,如果是带有参数，则参数子存在于/admin/a=1&b=2的originalUrl里面；
14.app.use(‘/‘,(res, req)=>{})会匹配所有的请求了，但会拦截调所有的请求，后面的路由都不走了，这时是可以省略‘／’的成为app.use((req,res，next)=>{next()})；就都会走但不会拦截了；
15.set(‘view engine’,’ejs’)，默认着views文件夹，如果要使用自己的文件夹，就在后面加set(‘views’,__dirname + ’my file’),使用res.render('index');
16.Express框架使用send函数，会自动根据内容帮我们设置content-type和200状态码，和end()一样只能一次；
17.app.use(express.static('./public'))；相当于把回调函数的实现给到express.static方法了，里面的逻辑是先从public目录下找文件，找不到就next下面的路由中间件；扩展，就是/jingtai路由就找public下的资源，app.use('/jingtai',express.static('./public'));
18.设置不同的状态码res.status(404).send(‘send’)；设置不同的content-type；res.set(‘content-type’:’text/html’);
19.Express框架中一般的get请求的参数在req.query里面，请求的参数一般是api?a=1&b=2或者api?a=1&b=2&b=3就产生了{a=1;b:[2,3]}b为数组了；
20.post请求必须使用body-parser模块，use使用后，可以用req.body得到参数，但是如果时表单中含有文件上传，还是需要formidable模块,body-parser不能进行文本，图片等资源的上传；
21.res.json({})，相当于直接send一个json数据；res.send()可以是string buffer object array；
22.app.use(bodyParser.urlencoded({extended: false}))用于处理application/x-www-form-urlendcoded常见的form表单的提交；
23.处理文件的提交，multipart/form-data 文件提交
var multipart = require('connect-multiparty');
var multipartMiddleware = multipart();
app.post('/formdata',multipartMiddleware, function (req, res) {
  console.log(req.body);
  res.send("post successfully!");
});
24.app.use(bodyParser.json())处理application/json提交的json格式的post请求
25.处理text/xml数据的提交，bodyParser不支持xml数据格式，通过最原始的on（‘data’）监听到数据后使用xml2json模块进行转化即可；https://www.cnblogs.com/shj-com/p/9590335.html看这个文档 
26.Express框架中的res.send()可以是string，buffer，object，array，客户端得到的是字符串，res.json()，放入json数据客户端得到的是对象；原生的end()只能是buffer或者字符串；
27.小项目sum：
1.后台MVC框架：controller层是路由层，控制中心，app.js是入口层，监听事件；model层是干具体的业务逻辑，最脏最累的活；
2.使用render就是从fs读取文件，所以改变资源文件，不用重启服务器；
3.部署的h5静态页面文件或者后台写的ejs文件，引用文件时如img，css，js可以直接写路由如/js/index.js，这样会默认加上所在页面的协议域名端口，里面的网络请求也是；
4.回调处必须加上return，防止进入下面的模版引擎代码；
5.不一定只会将public资源静态化，还可以将要访问的文件的资源，图片静态化；

第十一节课
1.如果使用node提供html静态服务，就将html文件放到public文件夹里面；
2.除了Vue模版引擎，node的ejs模版引起，还可以使用underscroe前端模版引擎，明天写出它的demo；
3.ejs模版引擎查看页面源码时页面已经渲染好了，如果使用underscore和Vue，查看源码时div里面时空的；
4.可以通过path.join(__dirname,’./../‘,’upload’)来处理相对于所在文件的路径问题；
5.通过fs.rename进行文件重命名或者转移时，oldPath和newPath必须都是具体到文件的后缀名；
6.fs.unlink(path,(err)=>{})删除文件
7.一般h5页面部署时，都是将html,js,css,img等等静态资源放在静态资源服务器里面；
8.除了ajax请求外，其他的页面请求，如form表单提交，a标签等，都会产生一个新的页面来展示提交的后台返回的结果；
9.简单总结以下bootstrap以及其他类似的UI框架的用法，先在官网找到页面需要的基本js，css等引入，然后根据需要寻找组件，把代码复制粘贴进来即可；
10.formidable的用法在原生的http模块和Express框架下是一摸一样的；
12.express框架下，如果设置了静态资源服务器，当访问的路径是/test这种文件夹时，回默认从public下的/test/目录下找index.html文件，找不到就next();
13.MongoDB下的文档之前是独立的，{文档1} {文档2} {文档3}，可以存在一个集合里面，一般情况下只有一个文档{},然后这个文档里面嵌套了多个文档或数组文档，每一个单独的文档之前不用逗号隔开，且每个文档就是JSON数据；
14.获取文档个数db.aaa.count()或者db.aaa.find().count();
15.update中直接更新(有则更新，无则添加，其他字段不保留)，以及配合$set(更新字段),$unset(删除字段)的使用；
16.update下的$push(总是添加)，$addToSet(有则不添加),如果是添加，就必定添加到数组上，不存在就新增数组再加进去；
17.文档最外层必定是{}，find找到的是数组，findOne()找到的是单个对象{};
18.updateMany({sal: {$lte: 1000}},{$inc:{sal: 400}}) 查找到所有薪水<=1000的，再加钱400；
19.查到时，第二个参数用于排除不需要的字段，需要就写1，不需要就不写；
20.findOne find() find({}) find({name: /s/gi}) find({age: {$lt:20}}) find({age: {$in: [10,20,30]}}) find({ages: {$in: [10,20,30]}})，$in后面必须是数组，前面可以是字符串或者数组
21.update下的$push是加后面的元素，$pushAll:[12,34]加后面的元素逐个加到数组中；
22.插入数据直接用insert就行了，包括了insertOne和insertMany；
23.replaceOne和save一样；
24.deleteOne({}) deleteMany({})删除全部。deleteMany({a: 'sara'})删除全部这个条件的数据
25.mysql sql server oracle access都属于结构型数据库，表里面都是行和列，每一行拥有相同的字段，但是字段的操作比较耗时，不灵活，非结构形式数据库NoSQL应运而生，Nosql无法挑战老牌数据库，但是在大数据时代有自己的意义；
26.NoSQL，非结构型数据库，数据库-集合-文档(JSON数据)，每一个文档毫无关系，可以放在一个collection里面；不擅长删选的作业，擅长灵活性强的IT系统，不需要高度的数据一致性；
27.mongo 使用数据库 mongod 开机 mongoimport 导入数据
28.mongoimport —db test —collection itcast —-drop(先把集合清空) —file data.json 导入的文件（可以是.json可以是txt）；
29.每一个集合collection里面有多个文档，一般是一个，每个文档都是外层是{}的JSON数据，且文档不用符号隔开；
30.find下面的多条件db.itcast.find({条件1，条件2})
31.find下面同一字段的且db.itcast.find({shuxue: {$gt:50,$lte:80}}) 
32.or用数组来做，db.itcast.find({$or:[{name:/T/},{name:/K/}]})
33.find().sort({yuewen:1,shuxue:-1})，1是升序，-1是降序
34.update下的$set，修改值db.itcast.update({name:/s/gi},{$set:{age:33}},{multi:true})默认更改一项，为true就多项；

第十二节课
1.数据库没有一种长连接的状态，每次访问都要重新连接一次，拿到client，通过db=client.db(dbName)拿到数据库，通过db.colletion(‘表’)进行操作；
2.DAO层，数据访问对象，是一种应用程序的编程接口，面向对象的数据库操作接口，把底层的数据访问逻辑和高层的业务逻辑分开，实现DAO模式能够更加专注编写数据访问代码,放在model里面专门用于处理业务逻辑和数据库的操作；
3.可以直接通过run来运行指定的js代码；
4.collection.insertOne(json,(err,res)=>{})进行插入数据,. Use insertOne, insertMany来插入，不要用insert了；
5.mongodb中find查找后产生的游标对象cursor，这个对象是一个可迭代对象，可通过toArray((err, items
)=>{})将游标转数组，在进行遍历items；
6.findOne(json)获取游标，此时的游标不是Cursor对象了，而是一个Promise对象，通过.then来直接获取查到的文档；
7.用法和mongodb的用法相同，只是增加了回调，获取数据增加了游标或Promise；
8.mongodb的js操作中，insert和update必须要有insertOne/insertMany,updateOne/updateMany来代替，关键字是写在{$set:{}}规则的最前面的；
9.获取集合的属性，比如大小，文档个数，db.teacher.stats().count或者db.teacher.count()；
10.分页 limit skip配合使用进行分页,此时的查找规则一般为{}即可；
11.js中获取集合文档个数:collection.estimatedDocumentCount().then((res)=>{console.log(res)}),也可以使用collection.count({条件}).then((count)=>{})得到满足条件的个数；
12.不产生新页面展示服务器的返回数据，就用ajax请求来请求数据；
13.underscore前端模版引擎中，ajax请求到数据后需要在js里面进行for循环生产一整套hmtl在append到父标签里面，而ejs可以直接在html里面写for循环类似Vue；
14.在ejs页面中使用underscore会存在模版冲突，解决方法是改underscore的源码，或者模版引擎用html格式;
15.$('.pabutton:first').addClass('active’);这个挺有用；要充分利用data-id，data-page等这样的自定义属性来存储数据便于获取值；
16.使用ejs时，页面时nodejs渲染好后传递给浏览器的，如果提前写了即将通过ajax获取到的标签的点击事件，就无法点击，应该在标签请求渲染完成时再添加点击事件；
17.http是无状态的协议，每一次的请求是没有关系的，第一次的时候一定是没有cookie的，登录时服务器设置客户端获取到cookie保存在请求头里面，cookie没有跨域限制，可以设置支持的域，用户可以自由看到，删除，修改或者禁用cookie，也可以用于攻击，存储量小；
18.cookie中的domain为空就支持任何服务器,maxAge为-1就是临时的，下次请求不带cookie了，使用的业务比如猜你喜欢，和特殊的cookie用于保存登录状态；
19.session依赖cookie，浏览器可以禁用或者清楚cookie，服务器下发的登录cookie是乱码，下次请求时服务器从缓冲中做匹配；
20.服务器一般自带生成session的插件，express-session是服务器中生成session的插件，在req上面，只需要先use(session({secret: ‘keyboard cat’,reserve: false,saveUninitialized: true}))一下，在登录时设置req.login = 1，req.cookie.maxAge = 100000;req.useName = ‘Sara’等等，客户端会自动获取一个乱码唯一的cookie，这个cookie不用取管它，下次请求会传给服务器，服务器只需要通过req.session里面去取前面设置信息即可；
21.session不会体现cookie机理，但是要记住是基于cookie制作的；

第十三节课
1.MD5可以用于版本校验;
2.只要服务器要处理图片，就要装graphicmagick，然后可以通过命令行来操作图片了；https://blog.csdn.net/iteye_9339/article/details/82476321
3.格式转换：$ gm convert a.jpeg b.png
4.修改图片尺寸大小，并保存到指定位置，压缩图片的鼻祖就调用这个；$ gm mogrify -output-directory 保存的目录名 -resize 320*200 dany.jpg
5.nodejs要使用graphicmagick，需要安装一个gm的包,但是要执行gm的api，系统环境中必须要安装graphicImagick全局命令；
6.nodejs非常适合裁剪图片，开一个服务裁剪图片，开一个服务提供java服务；
7.研究jquery的前台图片裁剪，jcrop插件，demo；
8.用户数据库集合如:（名字不能重复）
 {id: ,username: password: md5加密的，avatar: 20191017.jpg, sign: ‘我的个性签名’}
 {id: ,username: password: md5加密的，avatar: 20191017.jpg, sign: ‘我的个性签名’}
 {id: ,username: password: md5加密的，avatar: 20191017.jpg, sign: ‘我的个性签名’}
9.post集合，存储用户发布的文章：评论用数组装，
 {title: ,content: ,author: 上面的名字, date: 日期，zan: [‘小明’，‘小红’], comments: [{
   content: ‘’,
   author: ‘’,
   date: 
  },{},{}]}
10.ejs针对通用代码，可以抽出来再include进来；
11.
