第一节课
1.本地线上环境，域名服务器 公众号 封装微信api 框架库
2.爬取数据，数据清洗聚合
3.开发爬虫后台可视化 用户登录 Decorator重构Koa路由策略 上传后台 支付接口 
4.小程序页面 设计GraphQL数据交互方案 wepack重构小程序结构 公众号小程序数据，配置自动跳转到小程序 小程序商城
5.pm2一键部署上线node项目 SSL Nginx
6.公众服务号与小程序，订阅号门槛较低，适合个人或小公司，开个号发一些技术博客之类的，每天可以发文章，可以转为服务号但不可逆的，服务号比较像一个服务平台，有审核认证门槛，服务号有很多权限如支付权限，发文章次数有限制，企业号（大公司内部流程管理，如考勤系统）
7.小程序，嵌套在微信里面的app
8.服务号的申请需要企业资质，300元钱费用等
9.域名不备案在公众号和小程序里面是无法使用的；
10.$ nvm ls // 查看本地node的版本，再通过nvm install v8.1.1的node版本，
11.$ nvm use v8.1.2 // 使用这个版本
12.$ nvm alias default v8.1.2 // 默认这个版本
13.$ yarn config set registry https://registry.npm.taobao.org // 修改yarn的安装源为淘宝的镜像
14.$ vue -V // 查看vue版本
15.nginx配置里面的upstream里面设置转发的服务器或者负载均衡，而且nginx可以监听所有服务域名的请求，因为默认是80端口，然后根据里面配置的文件找到对应的域名转发到不同的服务器下
16.负载均衡：upstream ice {
   ip_hash; // 为每个访客固定一台后端的服务器，保护会话session
   server xx.xx.xx.xx:3007;
   server xx.xx.xx.xx:3006;
}

第二节课
1.小程序，开发阶段可以直接在官网申请一个小程序，注册一个新的小程序，激活链接完成申请；
2.使用sass，less，stylus预处理器时，可以将font,color，通用的样式抽象到不同的文件，通过import进行导入
3.Koa 依靠 async/await（generator + co）让异步操作可以变成同步写法，更好理解。最关键的不是这些中间的执行顺序，而是响应的时机，Express 使用 res.end() 是立即返回，这样想要做出些响应前的操作变得比较麻烦；而 Koa 是在所有中间件中使用 ctx.body 设置响应数据，但是并不立即响应，而是在所有中间件执行结束后，再调用 res.end(ctx.body) 进行响应，这样就为响应前的操作预留了空间，所以是请求与响应都在最外层，中间件处理是一层层进行，所以被理解成洋葱模型；
4.小程序每个页面有三个文件，index.js，wxml，wxss，可以使用Vue的写法将所有内容写到index.wxml里面，然后用template，script，style分别进行包裹起来；
5.JS异步编程的五种方式；
6.研究一下SSR和Preverndering预渲染对比
7.mongoose建立模型后，一旦引用过这个文件，就可以在后面直接使用let User = mongoose.model(‘User’)取到这个模型对象
8.mongoose中，schame.pre(‘save’, function(next) {这里的this是模型具体对象，且不能用箭头函数})，shema.statics.getUser = function(name) {这里的this是模型类}
9.userSchema.methods = {
  this.model(‘Student’)也可以拿到Student类
}
10.Restful Api有弊端，就是前后端接口要求的变化，导致可能会出现很对冗余的字段和接口，当项目复杂时，难以维护
11.GraphQL 时facebook提出的，将查询规则给到前端，让前端来控制需要获取的数据：
如：
接口：http://xxoo.com/graphql
参数：query {
 gardens {
   id,
   name,
   gardener
 }
 gardeners {
  id,
  name,
  phone
 }
}

第三节课
1.Ngrok魔法隧道代理本地服务，比较类似于nginx来代理本地服务
2.Nuxtjs流程时发起请求后走nuxtServerInit后，再走服务器中间件，服务器的路由，服务器路由不存在再进到某个页面，页面不存在就返回错误的页面
3.研究ramda函数库
4.

